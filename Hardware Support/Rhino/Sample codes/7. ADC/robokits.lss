
robokits.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000372  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .debug_aranges 00000040  00000000  00000000  000003c6  2**0
                  CONTENTS, READONLY, DEBUGGING
  2 .debug_pubnames 00000118  00000000  00000000  00000406  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_info   00000600  00000000  00000000  0000051e  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_abbrev 00000344  00000000  00000000  00000b1e  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_line   000006ce  00000000  00000000  00000e62  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_frame  00000170  00000000  00000000  00001530  2**2
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_str    000001f6  00000000  00000000  000016a0  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    0000025a  00000000  00000000  00001896  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_ranges 00000048  00000000  00000000  00001af0  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 55 00 	call	0xaa	; 0xaa <main>
  64:	0c 94 b7 01 	jmp	0x36e	; 0x36e <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <LED1ON>:
#include <compat/deprecated.h>		
#include <avr/interrupt.h>

#include "lcd.h"

void LED1ON(void) {sbi(PORTC,7);}
  6c:	af 9a       	sbi	0x15, 7	; 21
  6e:	08 95       	ret

00000070 <LED1OFF>:
void LED1OFF(void){cbi(PORTC,7);}
  70:	af 98       	cbi	0x15, 7	; 21
  72:	08 95       	ret

00000074 <TOGGLELED1>:
void TOGGLELED1(void) {if(bit_is_set(PORTC,7))cbi(PORTC,7); else sbi(PORTC,7);}
  74:	af 9b       	sbis	0x15, 7	; 21
  76:	02 c0       	rjmp	.+4      	; 0x7c <TOGGLELED1+0x8>
  78:	af 98       	cbi	0x15, 7	; 21
  7a:	08 95       	ret
  7c:	af 9a       	sbi	0x15, 7	; 21
  7e:	08 95       	ret

00000080 <LED2ON>:

void LED2ON(void) {sbi(PORTC,6);}
  80:	ae 9a       	sbi	0x15, 6	; 21
  82:	08 95       	ret

00000084 <LED2OFF>:
void LED2OFF(void) {cbi(PORTC,6);}
  84:	ae 98       	cbi	0x15, 6	; 21
  86:	08 95       	ret

00000088 <TOGGLELED2>:
void TOGGLELED2(void) {if(bit_is_set(PORTC,6))cbi(PORTC,6); else sbi(PORTC,6);}
  88:	ae 9b       	sbis	0x15, 6	; 21
  8a:	02 c0       	rjmp	.+4      	; 0x90 <TOGGLELED2+0x8>
  8c:	ae 98       	cbi	0x15, 6	; 21
  8e:	08 95       	ret
  90:	ae 9a       	sbi	0x15, 6	; 21
  92:	08 95       	ret

00000094 <SWITCH1ON>:

char SWITCH1ON(void) {return(bit_is_clear(PIND,6));}
  94:	80 b3       	in	r24, 0x10	; 16
  96:	82 95       	swap	r24
  98:	86 95       	lsr	r24
  9a:	86 95       	lsr	r24
  9c:	83 70       	andi	r24, 0x03	; 3
  9e:	80 95       	com	r24
  a0:	81 70       	andi	r24, 0x01	; 1
  a2:	08 95       	ret

000000a4 <SWITCH1OFF>:
char SWITCH1OFF(void) {return(bit_is_set(PIND,6));}
  a4:	80 b3       	in	r24, 0x10	; 16
  a6:	80 74       	andi	r24, 0x40	; 64
  a8:	08 95       	ret

000000aa <main>:


int main(void)
{
  aa:	cf 92       	push	r12
  ac:	df 92       	push	r13
  ae:	ef 92       	push	r14
  b0:	ff 92       	push	r15
  b2:	0f 93       	push	r16
  b4:	1f 93       	push	r17
  b6:	df 93       	push	r29
  b8:	cf 93       	push	r28
  ba:	cd b7       	in	r28, 0x3d	; 61
  bc:	de b7       	in	r29, 0x3e	; 62
  be:	27 97       	sbiw	r28, 0x07	; 7
  c0:	0f b6       	in	r0, 0x3f	; 63
  c2:	f8 94       	cli
  c4:	de bf       	out	0x3e, r29	; 62
  c6:	0f be       	out	0x3f, r0	; 63
  c8:	cd bf       	out	0x3d, r28	; 61
    char buffer[7];
    int  num;

	sbi(DDRC,6);
  ca:	a6 9a       	sbi	0x14, 6	; 20
	sbi(DDRC,7);
  cc:	a7 9a       	sbi	0x14, 7	; 20
	sbi(PORTD,6);
  ce:	96 9a       	sbi	0x12, 6	; 18
	sei();
  d0:	78 94       	sei
	
	ADCSRA = _BV(ADEN) | _BV(ADPS2) | _BV(ADPS1) | _BV(ADPS0);		
  d2:	87 e8       	ldi	r24, 0x87	; 135
  d4:	86 b9       	out	0x06, r24	; 6
#include <compat/deprecated.h>		
#include <avr/interrupt.h>

#include "lcd.h"

void LED1ON(void) {sbi(PORTC,7);}
  d6:	af 9a       	sbi	0x15, 7	; 21
	sei();
	
	ADCSRA = _BV(ADEN) | _BV(ADPS2) | _BV(ADPS1) | _BV(ADPS0);		

	LED1ON();
	LCD_INIT(LCD_DISP_ON);	
  d8:	8c e0       	ldi	r24, 0x0C	; 12
  da:	0e 94 38 01 	call	0x270	; 0x270 <LCD_INIT>
		{
		
		}
		num=ADCW;
        LCD_CLRSCR();
		itoa( num , buffer, 10);
  de:	7e 01       	movw	r14, r28
  e0:	08 94       	sec
  e2:	e1 1c       	adc	r14, r1
  e4:	f1 1c       	adc	r15, r1
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
  e6:	80 e9       	ldi	r24, 0x90	; 144
  e8:	c8 2e       	mov	r12, r24
  ea:	81 e0       	ldi	r24, 0x01	; 1
  ec:	d8 2e       	mov	r13, r24
	

	
	while(1)
	{
		ADMUX=0;		
  ee:	17 b8       	out	0x07, r1	; 7
		ADCSRA |= _BV(ADSC);	
  f0:	36 9a       	sbi	0x06, 6	; 6
		while (ADCSRA & _BV(ADSC))
  f2:	36 99       	sbic	0x06, 6	; 6
  f4:	fe cf       	rjmp	.-4      	; 0xf2 <main+0x48>
		{
		
		}
		num=ADCW;
  f6:	04 b1       	in	r16, 0x04	; 4
  f8:	15 b1       	in	r17, 0x05	; 5
        LCD_CLRSCR();
  fa:	0e 94 0f 01 	call	0x21e	; 0x21e <LCD_CLRSCR>
		itoa( num , buffer, 10);
  fe:	c8 01       	movw	r24, r16
 100:	b7 01       	movw	r22, r14
 102:	4a e0       	ldi	r20, 0x0A	; 10
 104:	50 e0       	ldi	r21, 0x00	; 0
 106:	0e 94 72 01 	call	0x2e4	; 0x2e4 <itoa>
        LCD_PRINT(buffer);
 10a:	c7 01       	movw	r24, r14
 10c:	0e 94 2c 01 	call	0x258	; 0x258 <LCD_PRINT>
 110:	88 ee       	ldi	r24, 0xE8	; 232
 112:	93 e0       	ldi	r25, 0x03	; 3
 114:	f6 01       	movw	r30, r12
 116:	31 97       	sbiw	r30, 0x01	; 1
 118:	f1 f7       	brne	.-4      	; 0x116 <main+0x6c>
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 11a:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 11c:	d9 f7       	brne	.-10     	; 0x114 <main+0x6a>
 11e:	e7 cf       	rjmp	.-50     	; 0xee <main+0x44>

00000120 <lcd_write>:
static void lcd_write(uint8_t data,uint8_t rs) 
{
    unsigned char dataBits ;


    if (rs) {   /* write data        (RS=1, RW=0) */
 120:	66 23       	and	r22, r22
 122:	11 f0       	breq	.+4      	; 0x128 <lcd_write+0x8>
       lcd_rs_high();
 124:	c0 9a       	sbi	0x18, 0	; 24
 126:	01 c0       	rjmp	.+2      	; 0x12a <lcd_write+0xa>
    } else {    /* write instruction (RS=0, RW=0) */
       lcd_rs_low();
 128:	c0 98       	cbi	0x18, 0	; 24
    }
    lcd_rw_low();
 12a:	c1 98       	cbi	0x18, 1	; 24
        LCD_DATA0_PORT = dataBits | 0x0F;
    }
    else
    {
        /* configure data pins as output */
        DDR(LCD_DATA0_PORT) |= _BV(LCD_DATA0_PIN);
 12c:	bc 9a       	sbi	0x17, 4	; 23
        DDR(LCD_DATA1_PORT) |= _BV(LCD_DATA1_PIN);
 12e:	bd 9a       	sbi	0x17, 5	; 23
        DDR(LCD_DATA2_PORT) |= _BV(LCD_DATA2_PIN);
 130:	be 9a       	sbi	0x17, 6	; 23
        DDR(LCD_DATA3_PORT) |= _BV(LCD_DATA3_PIN);
 132:	bf 9a       	sbi	0x17, 7	; 23
        
        /* output high nibble first */
        LCD_DATA3_PORT &= ~_BV(LCD_DATA3_PIN);
 134:	c7 98       	cbi	0x18, 7	; 24
        LCD_DATA2_PORT &= ~_BV(LCD_DATA2_PIN);
 136:	c6 98       	cbi	0x18, 6	; 24
        LCD_DATA1_PORT &= ~_BV(LCD_DATA1_PIN);
 138:	c5 98       	cbi	0x18, 5	; 24
        LCD_DATA0_PORT &= ~_BV(LCD_DATA0_PIN);
 13a:	c4 98       	cbi	0x18, 4	; 24
    	if(data & 0x80) LCD_DATA3_PORT |= _BV(LCD_DATA3_PIN);
 13c:	87 fd       	sbrc	r24, 7
 13e:	c7 9a       	sbi	0x18, 7	; 24
    	if(data & 0x40) LCD_DATA2_PORT |= _BV(LCD_DATA2_PIN);
 140:	86 fd       	sbrc	r24, 6
 142:	c6 9a       	sbi	0x18, 6	; 24
    	if(data & 0x20) LCD_DATA1_PORT |= _BV(LCD_DATA1_PIN);
 144:	85 fd       	sbrc	r24, 5
 146:	c5 9a       	sbi	0x18, 5	; 24
    	if(data & 0x10) LCD_DATA0_PORT |= _BV(LCD_DATA0_PIN);   
 148:	84 fd       	sbrc	r24, 4
 14a:	c4 9a       	sbi	0x18, 4	; 24

#if LCD_IO_MODE
/* toggle Enable Pin to initiate write */
static void toggle_e(void)
{
    lcd_e_high();
 14c:	c2 9a       	sbi	0x18, 2	; 24
    lcd_e_delay();
 14e:	00 c0       	rjmp	.+0      	; 0x150 <lcd_write+0x30>
    lcd_e_low();
 150:	c2 98       	cbi	0x18, 2	; 24
    	if(data & 0x20) LCD_DATA1_PORT |= _BV(LCD_DATA1_PIN);
    	if(data & 0x10) LCD_DATA0_PORT |= _BV(LCD_DATA0_PIN);   
        lcd_e_toggle();
        
        /* output low nibble */
        LCD_DATA3_PORT &= ~_BV(LCD_DATA3_PIN);
 152:	c7 98       	cbi	0x18, 7	; 24
        LCD_DATA2_PORT &= ~_BV(LCD_DATA2_PIN);
 154:	c6 98       	cbi	0x18, 6	; 24
        LCD_DATA1_PORT &= ~_BV(LCD_DATA1_PIN);
 156:	c5 98       	cbi	0x18, 5	; 24
        LCD_DATA0_PORT &= ~_BV(LCD_DATA0_PIN);
 158:	c4 98       	cbi	0x18, 4	; 24
    	if(data & 0x08) LCD_DATA3_PORT |= _BV(LCD_DATA3_PIN);
 15a:	83 fd       	sbrc	r24, 3
 15c:	c7 9a       	sbi	0x18, 7	; 24
    	if(data & 0x04) LCD_DATA2_PORT |= _BV(LCD_DATA2_PIN);
 15e:	82 fd       	sbrc	r24, 2
 160:	c6 9a       	sbi	0x18, 6	; 24
    	if(data & 0x02) LCD_DATA1_PORT |= _BV(LCD_DATA1_PIN);
 162:	81 fd       	sbrc	r24, 1
 164:	c5 9a       	sbi	0x18, 5	; 24
    	if(data & 0x01) LCD_DATA0_PORT |= _BV(LCD_DATA0_PIN);
 166:	80 fd       	sbrc	r24, 0
 168:	c4 9a       	sbi	0x18, 4	; 24

#if LCD_IO_MODE
/* toggle Enable Pin to initiate write */
static void toggle_e(void)
{
    lcd_e_high();
 16a:	c2 9a       	sbi	0x18, 2	; 24
    lcd_e_delay();
 16c:	00 c0       	rjmp	.+0      	; 0x16e <lcd_write+0x4e>
    lcd_e_low();
 16e:	c2 98       	cbi	0x18, 2	; 24
    	if(data & 0x02) LCD_DATA1_PORT |= _BV(LCD_DATA1_PIN);
    	if(data & 0x01) LCD_DATA0_PORT |= _BV(LCD_DATA0_PIN);
        lcd_e_toggle();        
        
        /* all data pins high (inactive) */
        LCD_DATA0_PORT |= _BV(LCD_DATA0_PIN);
 170:	c4 9a       	sbi	0x18, 4	; 24
        LCD_DATA1_PORT |= _BV(LCD_DATA1_PIN);
 172:	c5 9a       	sbi	0x18, 5	; 24
        LCD_DATA2_PORT |= _BV(LCD_DATA2_PIN);
 174:	c6 9a       	sbi	0x18, 6	; 24
        LCD_DATA3_PORT |= _BV(LCD_DATA3_PIN);
 176:	c7 9a       	sbi	0x18, 7	; 24
    }
}
 178:	08 95       	ret

0000017a <lcd_read>:
static uint8_t lcd_read(uint8_t rs) 
{
    uint8_t data;
    
    
    if (rs)
 17a:	88 23       	and	r24, r24
 17c:	11 f0       	breq	.+4      	; 0x182 <lcd_read+0x8>
        lcd_rs_high();                       /* RS=1: read data      */
 17e:	c0 9a       	sbi	0x18, 0	; 24
 180:	01 c0       	rjmp	.+2      	; 0x184 <lcd_read+0xa>
    else
        lcd_rs_low();                        /* RS=0: read busy flag */
 182:	c0 98       	cbi	0x18, 0	; 24
    lcd_rw_high();                           /* RW=1  read mode      */
 184:	c1 9a       	sbi	0x18, 1	; 24
        lcd_e_low();
    }
    else
    {
        /* configure data pins as input */
        DDR(LCD_DATA0_PORT) &= ~_BV(LCD_DATA0_PIN);
 186:	bc 98       	cbi	0x17, 4	; 23
        DDR(LCD_DATA1_PORT) &= ~_BV(LCD_DATA1_PIN);
 188:	bd 98       	cbi	0x17, 5	; 23
        DDR(LCD_DATA2_PORT) &= ~_BV(LCD_DATA2_PIN);
 18a:	be 98       	cbi	0x17, 6	; 23
        DDR(LCD_DATA3_PORT) &= ~_BV(LCD_DATA3_PIN);
 18c:	bf 98       	cbi	0x17, 7	; 23
                
        /* read high nibble first */
        lcd_e_high();
 18e:	c2 9a       	sbi	0x18, 2	; 24
        lcd_e_delay();        
 190:	00 c0       	rjmp	.+0      	; 0x192 <lcd_read+0x18>
        data = 0;
        if ( PIN(LCD_DATA0_PORT) & _BV(LCD_DATA0_PIN) ) data |= 0x10;
 192:	b4 9b       	sbis	0x16, 4	; 22
 194:	02 c0       	rjmp	.+4      	; 0x19a <lcd_read+0x20>
 196:	80 e1       	ldi	r24, 0x10	; 16
 198:	01 c0       	rjmp	.+2      	; 0x19c <lcd_read+0x22>
 19a:	80 e0       	ldi	r24, 0x00	; 0
        if ( PIN(LCD_DATA1_PORT) & _BV(LCD_DATA1_PIN) ) data |= 0x20;
 19c:	b5 99       	sbic	0x16, 5	; 22
 19e:	80 62       	ori	r24, 0x20	; 32
        if ( PIN(LCD_DATA2_PORT) & _BV(LCD_DATA2_PIN) ) data |= 0x40;
 1a0:	b6 99       	sbic	0x16, 6	; 22
 1a2:	80 64       	ori	r24, 0x40	; 64
        if ( PIN(LCD_DATA3_PORT) & _BV(LCD_DATA3_PIN) ) data |= 0x80;
 1a4:	b7 99       	sbic	0x16, 7	; 22
 1a6:	80 68       	ori	r24, 0x80	; 128
        lcd_e_low();
 1a8:	c2 98       	cbi	0x18, 2	; 24

        lcd_e_delay();                       /* Enable 500ns low       */
 1aa:	00 c0       	rjmp	.+0      	; 0x1ac <lcd_read+0x32>
    
        /* read low nibble */    
        lcd_e_high();
 1ac:	c2 9a       	sbi	0x18, 2	; 24
        lcd_e_delay();
 1ae:	00 c0       	rjmp	.+0      	; 0x1b0 <lcd_read+0x36>
        if ( PIN(LCD_DATA0_PORT) & _BV(LCD_DATA0_PIN) ) data |= 0x01;
 1b0:	b4 99       	sbic	0x16, 4	; 22
 1b2:	81 60       	ori	r24, 0x01	; 1
        if ( PIN(LCD_DATA1_PORT) & _BV(LCD_DATA1_PIN) ) data |= 0x02;
 1b4:	b5 99       	sbic	0x16, 5	; 22
 1b6:	82 60       	ori	r24, 0x02	; 2
        if ( PIN(LCD_DATA2_PORT) & _BV(LCD_DATA2_PIN) ) data |= 0x04;
 1b8:	b6 99       	sbic	0x16, 6	; 22
 1ba:	84 60       	ori	r24, 0x04	; 4
        if ( PIN(LCD_DATA3_PORT) & _BV(LCD_DATA3_PIN) ) data |= 0x08;        
 1bc:	b7 99       	sbic	0x16, 7	; 22
 1be:	88 60       	ori	r24, 0x08	; 8
        lcd_e_low();
 1c0:	c2 98       	cbi	0x18, 2	; 24
    }
    return data;
}
 1c2:	08 95       	ret

000001c4 <lcd_waitbusy>:

{
    register uint8_t c;
    
    /* wait until busy flag is cleared */
    while ( (c=lcd_read(0)) & (1<<LCD_BUSY)) {}
 1c4:	80 e0       	ldi	r24, 0x00	; 0
 1c6:	0e 94 bd 00 	call	0x17a	; 0x17a <lcd_read>
 1ca:	87 fd       	sbrc	r24, 7
 1cc:	fb cf       	rjmp	.-10     	; 0x1c4 <lcd_waitbusy>
static inline void _delayFourCycles(unsigned int __count)
{
    if ( __count == 0 )    
        __asm__ __volatile__( "rjmp 1f\n 1:" );    // 2 cycles
    else
        __asm__ __volatile__ (
 1ce:	88 e0       	ldi	r24, 0x08	; 8
 1d0:	90 e0       	ldi	r25, 0x00	; 0
 1d2:	01 97       	sbiw	r24, 0x01	; 1
 1d4:	f1 f7       	brne	.-4      	; 0x1d2 <lcd_waitbusy+0xe>
    
    /* the address counter is updated 4us after the busy flag is cleared */
    delay(2);

    /* now read the address counter */
    return (lcd_read(0));  // return address counter
 1d6:	80 e0       	ldi	r24, 0x00	; 0
 1d8:	0e 94 bd 00 	call	0x17a	; 0x17a <lcd_read>
    
}/* lcd_waitbusy */
 1dc:	08 95       	ret

000001de <lcd_command>:
Send LCD controller instruction command
Input:   instruction to send to LCD controller, see HD44780 data sheet
Returns: none
*************************************************************************/
void lcd_command(uint8_t cmd)
{
 1de:	1f 93       	push	r17
 1e0:	18 2f       	mov	r17, r24
    lcd_waitbusy();
 1e2:	0e 94 e2 00 	call	0x1c4	; 0x1c4 <lcd_waitbusy>
    lcd_write(cmd,0);
 1e6:	81 2f       	mov	r24, r17
 1e8:	60 e0       	ldi	r22, 0x00	; 0
 1ea:	0e 94 90 00 	call	0x120	; 0x120 <lcd_write>
}
 1ee:	1f 91       	pop	r17
 1f0:	08 95       	ret

000001f2 <lcd_data>:
Send data byte to LCD controller 
Input:   data to send to LCD controller, see HD44780 data sheet
Returns: none
*************************************************************************/
void lcd_data(uint8_t data)
{
 1f2:	1f 93       	push	r17
 1f4:	18 2f       	mov	r17, r24
    lcd_waitbusy();
 1f6:	0e 94 e2 00 	call	0x1c4	; 0x1c4 <lcd_waitbusy>
    lcd_write(data,1);
 1fa:	81 2f       	mov	r24, r17
 1fc:	61 e0       	ldi	r22, 0x01	; 1
 1fe:	0e 94 90 00 	call	0x120	; 0x120 <lcd_write>
}
 202:	1f 91       	pop	r17
 204:	08 95       	ret

00000206 <LCD_GOTOXY>:
{
#if LCD_LINES==1
    lcd_command((1<<LCD_DDRAM)+LCD_START_LINE1+x);
#endif
#if LCD_LINES==2
    if ( y==0 ) 
 206:	66 23       	and	r22, r22
 208:	11 f4       	brne	.+4      	; 0x20e <LCD_GOTOXY+0x8>
        lcd_command((1<<LCD_DDRAM)+LCD_START_LINE1+x);
 20a:	80 58       	subi	r24, 0x80	; 128
 20c:	01 c0       	rjmp	.+2      	; 0x210 <LCD_GOTOXY+0xa>
    else
        lcd_command((1<<LCD_DDRAM)+LCD_START_LINE2+x);
 20e:	80 54       	subi	r24, 0x40	; 64
 210:	0e 94 ef 00 	call	0x1de	; 0x1de <lcd_command>
 214:	08 95       	ret

00000216 <lcd_getxy>:

/*************************************************************************
*************************************************************************/
int lcd_getxy(void)
{
    return lcd_waitbusy();
 216:	0e 94 e2 00 	call	0x1c4	; 0x1c4 <lcd_waitbusy>
}
 21a:	90 e0       	ldi	r25, 0x00	; 0
 21c:	08 95       	ret

0000021e <LCD_CLRSCR>:
/*************************************************************************
Clear display and set cursor to home position
*************************************************************************/
void LCD_CLRSCR(void)
{
    lcd_command(1<<LCD_CLR);
 21e:	81 e0       	ldi	r24, 0x01	; 1
 220:	0e 94 ef 00 	call	0x1de	; 0x1de <lcd_command>
}
 224:	08 95       	ret

00000226 <LCD_HOME_POS>:
/*************************************************************************
Set cursor to home position
*************************************************************************/
void LCD_HOME_POS(void)
{
    lcd_command(1<<LCD_HOME);
 226:	82 e0       	ldi	r24, 0x02	; 2
 228:	0e 94 ef 00 	call	0x1de	; 0x1de <lcd_command>
}
 22c:	08 95       	ret

0000022e <LCD_PUTC>:
Display character at current cursor position 
Input:    character to be displayed                                       
Returns:  none
*************************************************************************/
void LCD_PUTC(char c)
{
 22e:	1f 93       	push	r17
 230:	18 2f       	mov	r17, r24
    uint8_t pos;


    pos = lcd_waitbusy();   // read busy-flag and address counter
 232:	0e 94 e2 00 	call	0x1c4	; 0x1c4 <lcd_waitbusy>
    if (c=='\n')
 236:	1a 30       	cpi	r17, 0x0A	; 10
 238:	49 f4       	brne	.+18     	; 0x24c <LCD_PUTC+0x1e>

#if LCD_LINES==1
    addressCounter = 0;
#endif
#if LCD_LINES==2
    if ( pos < (LCD_START_LINE2) )
 23a:	80 34       	cpi	r24, 0x40	; 64
 23c:	10 f0       	brcs	.+4      	; 0x242 <LCD_PUTC+0x14>
 23e:	80 e0       	ldi	r24, 0x00	; 0
 240:	01 c0       	rjmp	.+2      	; 0x244 <LCD_PUTC+0x16>
 242:	80 e4       	ldi	r24, 0x40	; 64
        addressCounter = LCD_START_LINE4;
    else 
        addressCounter = LCD_START_LINE1;
#endif
#endif
    lcd_command((1<<LCD_DDRAM)+addressCounter);
 244:	80 58       	subi	r24, 0x80	; 128
 246:	0e 94 ef 00 	call	0x1de	; 0x1de <lcd_command>
 24a:	04 c0       	rjmp	.+8      	; 0x254 <LCD_PUTC+0x26>
            lcd_write((1<<LCD_DDRAM)+LCD_START_LINE1,0);
        }
#endif
        lcd_waitbusy();
#endif
        lcd_write(c, 1);
 24c:	81 2f       	mov	r24, r17
 24e:	61 e0       	ldi	r22, 0x01	; 1
 250:	0e 94 90 00 	call	0x120	; 0x120 <lcd_write>
    }

}/* LCD_PUTC */
 254:	1f 91       	pop	r17
 256:	08 95       	ret

00000258 <LCD_PRINT>:
Input:    string to be displayed
Returns:  none
*************************************************************************/
void LCD_PRINT(const char *s)
/* print string on lcd (no auto linefeed) */
{
 258:	cf 93       	push	r28
 25a:	df 93       	push	r29
 25c:	ec 01       	movw	r28, r24
 25e:	02 c0       	rjmp	.+4      	; 0x264 <LCD_PRINT+0xc>
    register char c;

    while ( (c = *s++) ) {
        LCD_PUTC(c);
 260:	0e 94 17 01 	call	0x22e	; 0x22e <LCD_PUTC>
void LCD_PRINT(const char *s)
/* print string on lcd (no auto linefeed) */
{
    register char c;

    while ( (c = *s++) ) {
 264:	89 91       	ld	r24, Y+
 266:	88 23       	and	r24, r24
 268:	d9 f7       	brne	.-10     	; 0x260 <LCD_PRINT+0x8>
        LCD_PUTC(c);
    }

}/* LCD_PRINT */
 26a:	df 91       	pop	r29
 26c:	cf 91       	pop	r28
 26e:	08 95       	ret

00000270 <LCD_INIT>:
                   LCD_DISP_ON_CURSOR      display on, cursor on
                   LCD_DISP_CURSOR_BLINK   display on, cursor on flashing
Returns:  none
*************************************************************************/
void LCD_INIT(uint8_t dispAttr)
{
 270:	1f 93       	push	r17
 272:	18 2f       	mov	r17, r24
        DDR(LCD_E_PORT)     |= _BV(LCD_E_PIN);
    }
    else
    {
        /* configure all port bits as output (LCD data and control lines on different ports */
        DDR(LCD_RS_PORT)    |= _BV(LCD_RS_PIN);
 274:	b8 9a       	sbi	0x17, 0	; 23
        DDR(LCD_RW_PORT)    |= _BV(LCD_RW_PIN);
 276:	b9 9a       	sbi	0x17, 1	; 23
        DDR(LCD_E_PORT)     |= _BV(LCD_E_PIN);
 278:	ba 9a       	sbi	0x17, 2	; 23
        DDR(LCD_DATA0_PORT) |= _BV(LCD_DATA0_PIN);
 27a:	bc 9a       	sbi	0x17, 4	; 23
        DDR(LCD_DATA1_PORT) |= _BV(LCD_DATA1_PIN);
 27c:	bd 9a       	sbi	0x17, 5	; 23
        DDR(LCD_DATA2_PORT) |= _BV(LCD_DATA2_PIN);
 27e:	be 9a       	sbi	0x17, 6	; 23
        DDR(LCD_DATA3_PORT) |= _BV(LCD_DATA3_PIN);
 280:	bf 9a       	sbi	0x17, 7	; 23
static inline void _delayFourCycles(unsigned int __count)
{
    if ( __count == 0 )    
        __asm__ __volatile__( "rjmp 1f\n 1:" );    // 2 cycles
    else
        __asm__ __volatile__ (
 282:	80 e0       	ldi	r24, 0x00	; 0
 284:	9a ef       	ldi	r25, 0xFA	; 250
 286:	01 97       	sbiw	r24, 0x01	; 1
 288:	f1 f7       	brne	.-4      	; 0x286 <LCD_INIT+0x16>
        DDR(LCD_DATA3_PORT) |= _BV(LCD_DATA3_PIN);
    }
    delay(16000);        /* wait 16ms or more after power-on       */
    
    /* initial write to lcd is 8bit */
    LCD_DATA1_PORT |= _BV(LCD_DATA1_PIN);  // _BV(LCD_FUNCTION)>>4;
 28a:	c5 9a       	sbi	0x18, 5	; 24
    LCD_DATA0_PORT |= _BV(LCD_DATA0_PIN);  // _BV(LCD_FUNCTION_8BIT)>>4;
 28c:	c4 9a       	sbi	0x18, 4	; 24

#if LCD_IO_MODE
/* toggle Enable Pin to initiate write */
static void toggle_e(void)
{
    lcd_e_high();
 28e:	c2 9a       	sbi	0x18, 2	; 24
    lcd_e_delay();
 290:	00 c0       	rjmp	.+0      	; 0x292 <LCD_INIT+0x22>
    lcd_e_low();
 292:	c2 98       	cbi	0x18, 2	; 24
static inline void _delayFourCycles(unsigned int __count)
{
    if ( __count == 0 )    
        __asm__ __volatile__( "rjmp 1f\n 1:" );    // 2 cycles
    else
        __asm__ __volatile__ (
 294:	80 e0       	ldi	r24, 0x00	; 0
 296:	9e e4       	ldi	r25, 0x4E	; 78
 298:	01 97       	sbiw	r24, 0x01	; 1
 29a:	f1 f7       	brne	.-4      	; 0x298 <LCD_INIT+0x28>

#if LCD_IO_MODE
/* toggle Enable Pin to initiate write */
static void toggle_e(void)
{
    lcd_e_high();
 29c:	c2 9a       	sbi	0x18, 2	; 24
    lcd_e_delay();
 29e:	00 c0       	rjmp	.+0      	; 0x2a0 <LCD_INIT+0x30>
    lcd_e_low();
 2a0:	c2 98       	cbi	0x18, 2	; 24
static inline void _delayFourCycles(unsigned int __count)
{
    if ( __count == 0 )    
        __asm__ __volatile__( "rjmp 1f\n 1:" );    // 2 cycles
    else
        __asm__ __volatile__ (
 2a2:	80 e0       	ldi	r24, 0x00	; 0
 2a4:	91 e0       	ldi	r25, 0x01	; 1
 2a6:	fc 01       	movw	r30, r24
 2a8:	31 97       	sbiw	r30, 0x01	; 1
 2aa:	f1 f7       	brne	.-4      	; 0x2a8 <LCD_INIT+0x38>

#if LCD_IO_MODE
/* toggle Enable Pin to initiate write */
static void toggle_e(void)
{
    lcd_e_high();
 2ac:	c2 9a       	sbi	0x18, 2	; 24
    lcd_e_delay();
 2ae:	00 c0       	rjmp	.+0      	; 0x2b0 <LCD_INIT+0x40>
    lcd_e_low();
 2b0:	c2 98       	cbi	0x18, 2	; 24
static inline void _delayFourCycles(unsigned int __count)
{
    if ( __count == 0 )    
        __asm__ __volatile__( "rjmp 1f\n 1:" );    // 2 cycles
    else
        __asm__ __volatile__ (
 2b2:	fc 01       	movw	r30, r24
 2b4:	31 97       	sbiw	r30, 0x01	; 1
 2b6:	f1 f7       	brne	.-4      	; 0x2b4 <LCD_INIT+0x44>
    /* repeat last command a third time */
    lcd_e_toggle();      
    delay(64);           /* delay, busy flag can't be checked here */

    /* now configure for 4bit mode */
    LCD_DATA0_PORT &= ~_BV(LCD_DATA0_PIN);   // LCD_FUNCTION_4BIT_1LINE>>4
 2b8:	c4 98       	cbi	0x18, 4	; 24

#if LCD_IO_MODE
/* toggle Enable Pin to initiate write */
static void toggle_e(void)
{
    lcd_e_high();
 2ba:	c2 9a       	sbi	0x18, 2	; 24
    lcd_e_delay();
 2bc:	00 c0       	rjmp	.+0      	; 0x2be <LCD_INIT+0x4e>
    lcd_e_low();
 2be:	c2 98       	cbi	0x18, 2	; 24
static inline void _delayFourCycles(unsigned int __count)
{
    if ( __count == 0 )    
        __asm__ __volatile__( "rjmp 1f\n 1:" );    // 2 cycles
    else
        __asm__ __volatile__ (
 2c0:	01 97       	sbiw	r24, 0x01	; 1
 2c2:	f1 f7       	brne	.-4      	; 0x2c0 <LCD_INIT+0x50>
    /* Display with KS0073 controller requires special commands for enabling 4 line mode */
	lcd_command(KS0073_EXTENDED_FUNCTION_REGISTER_ON);
	lcd_command(KS0073_4LINES_MODE);
	lcd_command(KS0073_EXTENDED_FUNCTION_REGISTER_OFF);
#else
    lcd_command(LCD_FUNCTION_DEFAULT);      /* function set: display lines  */
 2c4:	88 e2       	ldi	r24, 0x28	; 40
 2c6:	0e 94 ef 00 	call	0x1de	; 0x1de <lcd_command>
#endif
    lcd_command(LCD_DISP_OFF);              /* display off                  */
 2ca:	88 e0       	ldi	r24, 0x08	; 8
 2cc:	0e 94 ef 00 	call	0x1de	; 0x1de <lcd_command>
    LCD_CLRSCR();                           /* display clear                */ 
 2d0:	0e 94 0f 01 	call	0x21e	; 0x21e <LCD_CLRSCR>
    lcd_command(LCD_MODE_DEFAULT);          /* set entry mode               */
 2d4:	86 e0       	ldi	r24, 0x06	; 6
 2d6:	0e 94 ef 00 	call	0x1de	; 0x1de <lcd_command>
    lcd_command(dispAttr);                  /* display/cursor control       */
 2da:	81 2f       	mov	r24, r17
 2dc:	0e 94 ef 00 	call	0x1de	; 0x1de <lcd_command>

}/* LCD_INIT */
 2e0:	1f 91       	pop	r17
 2e2:	08 95       	ret

000002e4 <itoa>:
 2e4:	fb 01       	movw	r30, r22
 2e6:	9f 01       	movw	r18, r30
 2e8:	e8 94       	clt
 2ea:	42 30       	cpi	r20, 0x02	; 2
 2ec:	c4 f0       	brlt	.+48     	; 0x31e <itoa+0x3a>
 2ee:	45 32       	cpi	r20, 0x25	; 37
 2f0:	b4 f4       	brge	.+44     	; 0x31e <itoa+0x3a>
 2f2:	4a 30       	cpi	r20, 0x0A	; 10
 2f4:	29 f4       	brne	.+10     	; 0x300 <itoa+0x1c>
 2f6:	97 fb       	bst	r25, 7
 2f8:	1e f4       	brtc	.+6      	; 0x300 <itoa+0x1c>
 2fa:	90 95       	com	r25
 2fc:	81 95       	neg	r24
 2fe:	9f 4f       	sbci	r25, 0xFF	; 255
 300:	64 2f       	mov	r22, r20
 302:	77 27       	eor	r23, r23
 304:	0e 94 a3 01 	call	0x346	; 0x346 <__udivmodhi4>
 308:	80 5d       	subi	r24, 0xD0	; 208
 30a:	8a 33       	cpi	r24, 0x3A	; 58
 30c:	0c f0       	brlt	.+2      	; 0x310 <itoa+0x2c>
 30e:	89 5d       	subi	r24, 0xD9	; 217
 310:	81 93       	st	Z+, r24
 312:	cb 01       	movw	r24, r22
 314:	00 97       	sbiw	r24, 0x00	; 0
 316:	a1 f7       	brne	.-24     	; 0x300 <itoa+0x1c>
 318:	16 f4       	brtc	.+4      	; 0x31e <itoa+0x3a>
 31a:	5d e2       	ldi	r21, 0x2D	; 45
 31c:	51 93       	st	Z+, r21
 31e:	10 82       	st	Z, r1
 320:	c9 01       	movw	r24, r18
 322:	0c 94 93 01 	jmp	0x326	; 0x326 <strrev>

00000326 <strrev>:
 326:	dc 01       	movw	r26, r24
 328:	fc 01       	movw	r30, r24
 32a:	67 2f       	mov	r22, r23
 32c:	71 91       	ld	r23, Z+
 32e:	77 23       	and	r23, r23
 330:	e1 f7       	brne	.-8      	; 0x32a <strrev+0x4>
 332:	32 97       	sbiw	r30, 0x02	; 2
 334:	04 c0       	rjmp	.+8      	; 0x33e <strrev+0x18>
 336:	7c 91       	ld	r23, X
 338:	6d 93       	st	X+, r22
 33a:	70 83       	st	Z, r23
 33c:	62 91       	ld	r22, -Z
 33e:	ae 17       	cp	r26, r30
 340:	bf 07       	cpc	r27, r31
 342:	c8 f3       	brcs	.-14     	; 0x336 <strrev+0x10>
 344:	08 95       	ret

00000346 <__udivmodhi4>:
 346:	aa 1b       	sub	r26, r26
 348:	bb 1b       	sub	r27, r27
 34a:	51 e1       	ldi	r21, 0x11	; 17
 34c:	07 c0       	rjmp	.+14     	; 0x35c <__udivmodhi4_ep>

0000034e <__udivmodhi4_loop>:
 34e:	aa 1f       	adc	r26, r26
 350:	bb 1f       	adc	r27, r27
 352:	a6 17       	cp	r26, r22
 354:	b7 07       	cpc	r27, r23
 356:	10 f0       	brcs	.+4      	; 0x35c <__udivmodhi4_ep>
 358:	a6 1b       	sub	r26, r22
 35a:	b7 0b       	sbc	r27, r23

0000035c <__udivmodhi4_ep>:
 35c:	88 1f       	adc	r24, r24
 35e:	99 1f       	adc	r25, r25
 360:	5a 95       	dec	r21
 362:	a9 f7       	brne	.-22     	; 0x34e <__udivmodhi4_loop>
 364:	80 95       	com	r24
 366:	90 95       	com	r25
 368:	bc 01       	movw	r22, r24
 36a:	cd 01       	movw	r24, r26
 36c:	08 95       	ret

0000036e <_exit>:
 36e:	f8 94       	cli

00000370 <__stop_program>:
 370:	ff cf       	rjmp	.-2      	; 0x370 <__stop_program>
