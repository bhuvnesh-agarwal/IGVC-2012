
robokits.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000011a  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .debug_aranges 00000020  00000000  00000000  0000016e  2**0
                  CONTENTS, READONLY, DEBUGGING
  2 .debug_pubnames 00000084  00000000  00000000  0000018e  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_info   00000315  00000000  00000000  00000212  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_abbrev 00000156  00000000  00000000  00000527  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_line   00000235  00000000  00000000  0000067d  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_frame  000000a0  00000000  00000000  000008b4  2**2
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_str    0000013b  00000000  00000000  00000954  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    000000d0  00000000  00000000  00000a8f  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_ranges 00000138  00000000  00000000  00000b5f  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 55 00 	call	0xaa	; 0xaa <main>
  64:	0c 94 8b 00 	jmp	0x116	; 0x116 <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <LED1ON>:
#include <avr/pgmspace.h>
#include <util/delay.h>				
#include <compat/deprecated.h>		
#include <avr/interrupt.h>

void LED1ON(void) {sbi(PORTC,7);}
  6c:	af 9a       	sbi	0x15, 7	; 21
  6e:	08 95       	ret

00000070 <LED1OFF>:
void LED1OFF(void){cbi(PORTC,7);}
  70:	af 98       	cbi	0x15, 7	; 21
  72:	08 95       	ret

00000074 <TOGGLELED1>:
void TOGGLELED1(void) {if(bit_is_set(PORTC,7))cbi(PORTC,7); else sbi(PORTC,7);}
  74:	af 9b       	sbis	0x15, 7	; 21
  76:	02 c0       	rjmp	.+4      	; 0x7c <TOGGLELED1+0x8>
  78:	af 98       	cbi	0x15, 7	; 21
  7a:	08 95       	ret
  7c:	af 9a       	sbi	0x15, 7	; 21
  7e:	08 95       	ret

00000080 <LED2ON>:

void LED2ON(void) {sbi(PORTC,6);}
  80:	ae 9a       	sbi	0x15, 6	; 21
  82:	08 95       	ret

00000084 <LED2OFF>:
void LED2OFF(void) {cbi(PORTC,6);}
  84:	ae 98       	cbi	0x15, 6	; 21
  86:	08 95       	ret

00000088 <TOGGLELED2>:
void TOGGLELED2(void) {if(bit_is_set(PORTC,6))cbi(PORTC,6); else sbi(PORTC,6);}
  88:	ae 9b       	sbis	0x15, 6	; 21
  8a:	02 c0       	rjmp	.+4      	; 0x90 <TOGGLELED2+0x8>
  8c:	ae 98       	cbi	0x15, 6	; 21
  8e:	08 95       	ret
  90:	ae 9a       	sbi	0x15, 6	; 21
  92:	08 95       	ret

00000094 <SWITCH1ON>:

char SWITCH1ON(void) {return(bit_is_clear(PIND,6));}
  94:	80 b3       	in	r24, 0x10	; 16
  96:	82 95       	swap	r24
  98:	86 95       	lsr	r24
  9a:	86 95       	lsr	r24
  9c:	83 70       	andi	r24, 0x03	; 3
  9e:	80 95       	com	r24
  a0:	81 70       	andi	r24, 0x01	; 1
  a2:	08 95       	ret

000000a4 <SWITCH1OFF>:
char SWITCH1OFF(void) {return(bit_is_set(PIND,6));}
  a4:	80 b3       	in	r24, 0x10	; 16
  a6:	80 74       	andi	r24, 0x40	; 64
  a8:	08 95       	ret

000000aa <main>:


int main(void)
{
	int i;
	sbi(DDRC,6);
  aa:	a6 9a       	sbi	0x14, 6	; 20
	sbi(DDRC,7);
  ac:	a7 9a       	sbi	0x14, 7	; 20
	sbi(PORTD,6);
  ae:	96 9a       	sbi	0x12, 6	; 18
	sei();
  b0:	78 94       	sei
	sbi(DDRA,0);
  b2:	d0 9a       	sbi	0x1a, 0	; 26
#include <avr/pgmspace.h>
#include <util/delay.h>				
#include <compat/deprecated.h>		
#include <avr/interrupt.h>

void LED1ON(void) {sbi(PORTC,7);}
  b4:	af 9a       	sbi	0x15, 7	; 21
  b6:	20 e0       	ldi	r18, 0x00	; 0
  b8:	30 e0       	ldi	r19, 0x00	; 0
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
  ba:	a0 e4       	ldi	r26, 0x40	; 64
  bc:	bf e1       	ldi	r27, 0x1F	; 31
	
	while(1)
	{
		for(i=0;i<50;i++)
		{
			sbi(PORTA,0);
  be:	40 e9       	ldi	r20, 0x90	; 144
  c0:	51 e0       	ldi	r21, 0x01	; 1
  c2:	60 ea       	ldi	r22, 0xA0	; 160
  c4:	7f e0       	ldi	r23, 0x0F	; 15
  c6:	0e c0       	rjmp	.+28     	; 0xe4 <main+0x3a>
  c8:	d8 9a       	sbi	0x1b, 0	; 27
  ca:	cd 01       	movw	r24, r26
  cc:	01 97       	sbiw	r24, 0x01	; 1
  ce:	f1 f7       	brne	.-4      	; 0xcc <main+0x22>
			_delay_us(2000);
			cbi(PORTA,0);
  d0:	d8 98       	cbi	0x1b, 0	; 27
  d2:	84 eb       	ldi	r24, 0xB4	; 180
  d4:	90 e0       	ldi	r25, 0x00	; 0
  d6:	fa 01       	movw	r30, r20
  d8:	31 97       	sbiw	r30, 0x01	; 1
  da:	f1 f7       	brne	.-4      	; 0xd8 <main+0x2e>
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
  dc:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
  de:	d9 f7       	brne	.-10     	; 0xd6 <main+0x2c>

	LED1ON();	
	
	while(1)
	{
		for(i=0;i<50;i++)
  e0:	2f 5f       	subi	r18, 0xFF	; 255
  e2:	3f 4f       	sbci	r19, 0xFF	; 255
  e4:	22 33       	cpi	r18, 0x32	; 50
  e6:	31 05       	cpc	r19, r1
  e8:	7c f3       	brlt	.-34     	; 0xc8 <main+0x1e>
  ea:	20 e0       	ldi	r18, 0x00	; 0
  ec:	30 e0       	ldi	r19, 0x00	; 0
			cbi(PORTA,0);
			_delay_ms(18);
		}
		for(i=0;i<50;i++)
		{
			sbi(PORTA,0);
  ee:	d8 9a       	sbi	0x1b, 0	; 27
  f0:	cb 01       	movw	r24, r22
  f2:	01 97       	sbiw	r24, 0x01	; 1
  f4:	f1 f7       	brne	.-4      	; 0xf2 <main+0x48>
			_delay_us(1000);
			cbi(PORTA,0);
  f6:	d8 98       	cbi	0x1b, 0	; 27
  f8:	8e eb       	ldi	r24, 0xBE	; 190
  fa:	90 e0       	ldi	r25, 0x00	; 0
  fc:	fa 01       	movw	r30, r20
  fe:	31 97       	sbiw	r30, 0x01	; 1
 100:	f1 f7       	brne	.-4      	; 0xfe <main+0x54>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 102:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 104:	d9 f7       	brne	.-10     	; 0xfc <main+0x52>
			sbi(PORTA,0);
			_delay_us(2000);
			cbi(PORTA,0);
			_delay_ms(18);
		}
		for(i=0;i<50;i++)
 106:	2f 5f       	subi	r18, 0xFF	; 255
 108:	3f 4f       	sbci	r19, 0xFF	; 255
 10a:	22 33       	cpi	r18, 0x32	; 50
 10c:	31 05       	cpc	r19, r1
 10e:	79 f7       	brne	.-34     	; 0xee <main+0x44>
 110:	20 e0       	ldi	r18, 0x00	; 0
 112:	30 e0       	ldi	r19, 0x00	; 0
 114:	e7 cf       	rjmp	.-50     	; 0xe4 <main+0x3a>

00000116 <_exit>:
 116:	f8 94       	cli

00000118 <__stop_program>:
 118:	ff cf       	rjmp	.-2      	; 0x118 <__stop_program>
