
robokits.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000002a8  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000006a  00800060  000002a8  0000033c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000045  008000ca  008000ca  000003a6  2**0
                  ALLOC
  3 .debug_aranges 00000040  00000000  00000000  000003a6  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_pubnames 000000a3  00000000  00000000  000003e6  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000339  00000000  00000000  00000489  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000001d6  00000000  00000000  000007c2  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000002be  00000000  00000000  00000998  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000000b0  00000000  00000000  00000c58  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000017d  00000000  00000000  00000d08  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000143  00000000  00000000  00000e85  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 7c 00 	jmp	0xf8	; 0xf8 <__vector_11>
  30:	0c 94 a6 00 	jmp	0x14c	; 0x14c <__vector_12>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e8 ea       	ldi	r30, 0xA8	; 168
  68:	f2 e0       	ldi	r31, 0x02	; 2
  6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
  70:	aa 3c       	cpi	r26, 0xCA	; 202
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
  76:	11 e0       	ldi	r17, 0x01	; 1
  78:	aa ec       	ldi	r26, 0xCA	; 202
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	af 30       	cpi	r26, 0x0F	; 15
  82:	b1 07       	cpc	r27, r17
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 60 00 	call	0xc0	; 0xc0 <main>
  8a:	0c 94 52 01 	jmp	0x2a4	; 0x2a4 <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <LED1ON>:
#include <avr/interrupt.h>
#include "uart.h"

#define UART_BAUD_RATE 9600 

void LED1ON(void) {sbi(PORTC,7);}
  92:	af 9a       	sbi	0x15, 7	; 21
  94:	08 95       	ret

00000096 <forward>:

void forward(char lspeed, char rspeed)
{
	OCR1A = (uint8_t)(lspeed-'0')*2048;
  96:	80 53       	subi	r24, 0x30	; 48
  98:	38 2f       	mov	r19, r24
  9a:	33 0f       	add	r19, r19
  9c:	33 0f       	add	r19, r19
  9e:	33 0f       	add	r19, r19
  a0:	20 e0       	ldi	r18, 0x00	; 0
  a2:	3b bd       	out	0x2b, r19	; 43
  a4:	2a bd       	out	0x2a, r18	; 42
	OCR1B = (uint8_t)(rspeed-'0')*2048;
  a6:	60 53       	subi	r22, 0x30	; 48
  a8:	96 2f       	mov	r25, r22
  aa:	99 0f       	add	r25, r25
  ac:	99 0f       	add	r25, r25
  ae:	99 0f       	add	r25, r25
  b0:	80 e0       	ldi	r24, 0x00	; 0
  b2:	99 bd       	out	0x29, r25	; 41
  b4:	88 bd       	out	0x28, r24	; 40
	
	//TCCR0 = (1<<CS01)|(1<<WGM01)|(1<<WGM00)|(1<<COM01); //LEFT PWM
	//t0_fastpwm_init();

	sbi(PORTD,0);                                      //LEFT MOTOR POSITIVE
  b6:	90 9a       	sbi	0x12, 0	; 18
	cbi(PORTD,1);                                   // LEFT MOTOR NEGATIVE
  b8:	91 98       	cbi	0x12, 1	; 18

	sbi(PORTD,2);                                      //RIGHT MOTOR POSITIVE
  ba:	92 9a       	sbi	0x12, 2	; 18
	cbi(PORTD,3);                                   // RIGHT MOTOR NEGATIVE
  bc:	93 98       	cbi	0x12, 3	; 18

	return;                                  
}
  be:	08 95       	ret

000000c0 <main>:

int main(void)
{
	int i;
	sbi(DDRC,6);
  c0:	a6 9a       	sbi	0x14, 6	; 20
	sbi(DDRC,7);
  c2:	a7 9a       	sbi	0x14, 7	; 20
	sbi(PORTD,6);
  c4:	96 9a       	sbi	0x12, 6	; 18
	sei();
  c6:	78 94       	sei
	
	UART_INIT(UART_BAUD_RATE);	
  c8:	60 e8       	ldi	r22, 0x80	; 128
  ca:	75 e2       	ldi	r23, 0x25	; 37
  cc:	80 e0       	ldi	r24, 0x00	; 0
  ce:	90 e0       	ldi	r25, 0x00	; 0
  d0:	0e 94 cb 00 	call	0x196	; 0x196 <UART_INIT>
#include <avr/interrupt.h>
#include "uart.h"

#define UART_BAUD_RATE 9600 

void LED1ON(void) {sbi(PORTC,7);}
  d4:	af 9a       	sbi	0x15, 7	; 21
	
	UART_INIT(UART_BAUD_RATE);	

	LED1ON();

    UART_PRINT("\r\n\nSample code made by Robokits India for RHINO robot control board.");
  d6:	80 e6       	ldi	r24, 0x60	; 96
  d8:	90 e0       	ldi	r25, 0x00	; 0
  da:	0e 94 23 01 	call	0x246	; 0x246 <UART_PRINT>
	UART_PRINT("\r\n\nVisit Us at WWW.ROBOKITS.CO.IN. ");
  de:	85 ea       	ldi	r24, 0xA5	; 165
  e0:	90 e0       	ldi	r25, 0x00	; 0
  e2:	0e 94 23 01 	call	0x246	; 0x246 <UART_PRINT>

	
	while(1)
	{
		i=UART_GETCHAR();
  e6:	0e 94 f4 00 	call	0x1e8	; 0x1e8 <UART_GETCHAR>
		if(i<256)
  ea:	8f 3f       	cpi	r24, 0xFF	; 255
  ec:	91 05       	cpc	r25, r1
  ee:	09 f0       	breq	.+2      	; 0xf2 <main+0x32>
  f0:	d4 f7       	brge	.-12     	; 0xe6 <main+0x26>
		{
			UART_PUTCHAR(i);
  f2:	0e 94 11 01 	call	0x222	; 0x222 <UART_PUTCHAR>
  f6:	f7 cf       	rjmp	.-18     	; 0xe6 <main+0x26>

000000f8 <__vector_11>:
SIGNAL(UART0_RECEIVE_INTERRUPT)
/*************************************************************************
Function: UART Receive Complete interrupt
Purpose:  called when the UART has received a character
**************************************************************************/
{
  f8:	1f 92       	push	r1
  fa:	0f 92       	push	r0
  fc:	0f b6       	in	r0, 0x3f	; 63
  fe:	0f 92       	push	r0
 100:	11 24       	eor	r1, r1
 102:	2f 93       	push	r18
 104:	8f 93       	push	r24
 106:	9f 93       	push	r25
 108:	ef 93       	push	r30
 10a:	ff 93       	push	r31
    unsigned char usr;
    unsigned char lastRxError;
 
 
    /* read UART status register and UART data register */ 
    usr  = UART0_STATUS;
 10c:	9b b1       	in	r25, 0x0b	; 11
    data = UART0_DATA;
 10e:	2c b1       	in	r18, 0x0c	; 12
#elif defined ( ATMEGA_UART )
    lastRxError = (usr & (_BV(FE)|_BV(DOR)) );
#endif
        
    /* calculate buffer index */ 
    tmphead = ( UART_RxHead + 1) & UART_RX_BUFFER_MASK;
 110:	e0 91 0c 01 	lds	r30, 0x010C
 114:	ef 5f       	subi	r30, 0xFF	; 255
 116:	ef 71       	andi	r30, 0x1F	; 31
    
    if ( tmphead == UART_RxTail ) {
 118:	80 91 0d 01 	lds	r24, 0x010D
 11c:	e8 17       	cp	r30, r24
 11e:	11 f4       	brne	.+4      	; 0x124 <__vector_11+0x2c>
 120:	82 e0       	ldi	r24, 0x02	; 2
 122:	08 c0       	rjmp	.+16     	; 0x134 <__vector_11+0x3c>
    
    /* */
#if defined( AT90_UART )
    lastRxError = (usr & (_BV(FE)|_BV(DOR)) );
#elif defined( ATMEGA_USART )
    lastRxError = (usr & (_BV(FE)|_BV(DOR)) );
 124:	89 2f       	mov	r24, r25
 126:	88 71       	andi	r24, 0x18	; 24
    if ( tmphead == UART_RxTail ) {
        /* error: receive buffer overflow */
        lastRxError = UART_BUFFER_OVERFLOW >> 8;
    }else{
        /* store new index */
        UART_RxHead = tmphead;
 128:	e0 93 0c 01 	sts	0x010C, r30
        /* store received data in buffer */
        UART_RxBuf[tmphead] = data;
 12c:	f0 e0       	ldi	r31, 0x00	; 0
 12e:	e6 51       	subi	r30, 0x16	; 22
 130:	ff 4f       	sbci	r31, 0xFF	; 255
 132:	20 83       	st	Z, r18
    }
    UART_LastRxError = lastRxError;   
 134:	80 93 0e 01 	sts	0x010E, r24
}
 138:	ff 91       	pop	r31
 13a:	ef 91       	pop	r30
 13c:	9f 91       	pop	r25
 13e:	8f 91       	pop	r24
 140:	2f 91       	pop	r18
 142:	0f 90       	pop	r0
 144:	0f be       	out	0x3f, r0	; 63
 146:	0f 90       	pop	r0
 148:	1f 90       	pop	r1
 14a:	18 95       	reti

0000014c <__vector_12>:
SIGNAL(UART0_TRANSMIT_INTERRUPT)
/*************************************************************************
Function: UART Data Register Empty interrupt
Purpose:  called when the UART is ready to transmit the next byte
**************************************************************************/
{
 14c:	1f 92       	push	r1
 14e:	0f 92       	push	r0
 150:	0f b6       	in	r0, 0x3f	; 63
 152:	0f 92       	push	r0
 154:	11 24       	eor	r1, r1
 156:	8f 93       	push	r24
 158:	9f 93       	push	r25
 15a:	ef 93       	push	r30
 15c:	ff 93       	push	r31
    unsigned char tmptail;

    
    if ( UART_TxHead != UART_TxTail) {
 15e:	90 91 0a 01 	lds	r25, 0x010A
 162:	80 91 0b 01 	lds	r24, 0x010B
 166:	98 17       	cp	r25, r24
 168:	61 f0       	breq	.+24     	; 0x182 <__vector_12+0x36>
        /* calculate and store new buffer index */
        tmptail = (UART_TxTail + 1) & UART_TX_BUFFER_MASK;
 16a:	e0 91 0b 01 	lds	r30, 0x010B
 16e:	ef 5f       	subi	r30, 0xFF	; 255
 170:	ef 71       	andi	r30, 0x1F	; 31
        UART_TxTail = tmptail;
 172:	e0 93 0b 01 	sts	0x010B, r30
        /* get one byte from buffer and write it to UART */
        UART0_DATA = UART_TxBuf[tmptail];  /* start transmission */
 176:	f0 e0       	ldi	r31, 0x00	; 0
 178:	e6 53       	subi	r30, 0x36	; 54
 17a:	ff 4f       	sbci	r31, 0xFF	; 255
 17c:	80 81       	ld	r24, Z
 17e:	8c b9       	out	0x0c, r24	; 12
 180:	01 c0       	rjmp	.+2      	; 0x184 <__vector_12+0x38>
    }else{
        /* tx buffer empty, disable UDRE interrupt */
        UART0_CONTROL &= ~_BV(UART0_UDRIE);
 182:	55 98       	cbi	0x0a, 5	; 10
    }
}
 184:	ff 91       	pop	r31
 186:	ef 91       	pop	r30
 188:	9f 91       	pop	r25
 18a:	8f 91       	pop	r24
 18c:	0f 90       	pop	r0
 18e:	0f be       	out	0x3f, r0	; 63
 190:	0f 90       	pop	r0
 192:	1f 90       	pop	r1
 194:	18 95       	reti

00000196 <UART_INIT>:
Purpose:  initialize UART and set baudrate
Input:    baudrate using macro UART_BAUD_SELECT()
Returns:  none
**************************************************************************/
void UART_INIT(unsigned long baudrate)
{
 196:	9b 01       	movw	r18, r22
 198:	ac 01       	movw	r20, r24
    UART_TxHead = 0;
 19a:	10 92 0a 01 	sts	0x010A, r1
    UART_TxTail = 0;
 19e:	10 92 0b 01 	sts	0x010B, r1
    UART_RxHead = 0;
 1a2:	10 92 0c 01 	sts	0x010C, r1
    UART_RxTail = 0;
 1a6:	10 92 0d 01 	sts	0x010D, r1
    /* enable UART receiver and transmmitter and receive complete interrupt */
    UART0_CONTROL = _BV(RXCIE)|_BV(RXEN)|_BV(TXEN);

#elif defined (ATMEGA_USART)
		
	UART0_STATUS = (1<<U2X);  //Enable 2x speed
 1aa:	82 e0       	ldi	r24, 0x02	; 2
 1ac:	8b b9       	out	0x0b, r24	; 11
	baudrate=((F_CPU/(8*baudrate))-1);
 1ae:	63 e0       	ldi	r22, 0x03	; 3
 1b0:	22 0f       	add	r18, r18
 1b2:	33 1f       	adc	r19, r19
 1b4:	44 1f       	adc	r20, r20
 1b6:	55 1f       	adc	r21, r21
 1b8:	6a 95       	dec	r22
 1ba:	d1 f7       	brne	.-12     	; 0x1b0 <UART_INIT+0x1a>
 1bc:	60 e0       	ldi	r22, 0x00	; 0
 1be:	74 e2       	ldi	r23, 0x24	; 36
 1c0:	84 ef       	ldi	r24, 0xF4	; 244
 1c2:	90 e0       	ldi	r25, 0x00	; 0
 1c4:	0e 94 30 01 	call	0x260	; 0x260 <__udivmodsi4>
 1c8:	c9 01       	movw	r24, r18
 1ca:	da 01       	movw	r26, r20
 1cc:	01 97       	sbiw	r24, 0x01	; 1
 1ce:	a1 09       	sbc	r26, r1
 1d0:	b1 09       	sbc	r27, r1

    UBRRH = (unsigned char)(baudrate>>8);
 1d2:	29 2f       	mov	r18, r25
 1d4:	3a 2f       	mov	r19, r26
 1d6:	4b 2f       	mov	r20, r27
 1d8:	55 27       	eor	r21, r21
 1da:	20 bd       	out	0x20, r18	; 32
    UBRRL = (unsigned char) baudrate;
 1dc:	89 b9       	out	0x09, r24	; 9
   
    /* Enable USART receiver and transmitter and receive complete interrupt */
    UART0_CONTROL = _BV(RXCIE)|(1<<RXEN)|(1<<TXEN);
 1de:	88 e9       	ldi	r24, 0x98	; 152
 1e0:	8a b9       	out	0x0a, r24	; 10
    
    /* Set frame format: asynchronous, 8data, no parity, 1stop bit */
    #ifdef URSEL
    UCSRC = (1<<URSEL)|(3<<UCSZ0);
 1e2:	86 e8       	ldi	r24, 0x86	; 134
 1e4:	80 bd       	out	0x20, r24	; 32
    /* Enable UART receiver and transmitter and receive complete interrupt */
    UART0_CONTROL = _BV(RXCIE)|(1<<RXEN)|(1<<TXEN);

#endif

}/* UART_INIT */
 1e6:	08 95       	ret

000001e8 <UART_GETCHAR>:
{    
    unsigned char tmptail;
    unsigned char data;


    if ( UART_RxHead == UART_RxTail ) {
 1e8:	90 91 0c 01 	lds	r25, 0x010C
 1ec:	80 91 0d 01 	lds	r24, 0x010D
 1f0:	98 17       	cp	r25, r24
 1f2:	19 f4       	brne	.+6      	; 0x1fa <UART_GETCHAR+0x12>
 1f4:	20 e0       	ldi	r18, 0x00	; 0
 1f6:	31 e0       	ldi	r19, 0x01	; 1
 1f8:	12 c0       	rjmp	.+36     	; 0x21e <UART_GETCHAR+0x36>
        return UART_NO_DATA;   /* no data available */
    }
    
    /* calculate /store buffer index */
    tmptail = (UART_RxTail + 1) & UART_RX_BUFFER_MASK;
 1fa:	e0 91 0d 01 	lds	r30, 0x010D
 1fe:	ef 5f       	subi	r30, 0xFF	; 255
 200:	ef 71       	andi	r30, 0x1F	; 31
    UART_RxTail = tmptail; 
 202:	e0 93 0d 01 	sts	0x010D, r30
    
    /* get data from receive buffer */
    data = UART_RxBuf[tmptail];
 206:	f0 e0       	ldi	r31, 0x00	; 0
 208:	e6 51       	subi	r30, 0x16	; 22
 20a:	ff 4f       	sbci	r31, 0xFF	; 255
 20c:	30 81       	ld	r19, Z
    
    return (UART_LastRxError << 8) + data;
 20e:	20 91 0e 01 	lds	r18, 0x010E
 212:	92 2f       	mov	r25, r18
 214:	80 e0       	ldi	r24, 0x00	; 0
 216:	ac 01       	movw	r20, r24
 218:	43 0f       	add	r20, r19
 21a:	51 1d       	adc	r21, r1
 21c:	9a 01       	movw	r18, r20

}/* UART_GETCHAR */
 21e:	c9 01       	movw	r24, r18
 220:	08 95       	ret

00000222 <UART_PUTCHAR>:
Purpose:  write byte to ringbuffer for transmitting via UART
Input:    byte to be transmitted
Returns:  none          
**************************************************************************/
void UART_PUTCHAR(unsigned char data)
{
 222:	28 2f       	mov	r18, r24
    unsigned char tmphead;

    
    tmphead  = (UART_TxHead + 1) & UART_TX_BUFFER_MASK;
 224:	90 91 0a 01 	lds	r25, 0x010A
 228:	9f 5f       	subi	r25, 0xFF	; 255
 22a:	9f 71       	andi	r25, 0x1F	; 31
    
    while ( tmphead == UART_TxTail ){
 22c:	80 91 0b 01 	lds	r24, 0x010B
 230:	98 17       	cp	r25, r24
 232:	e1 f3       	breq	.-8      	; 0x22c <UART_PUTCHAR+0xa>
        ;/* wait for free space in buffer */
    }
    
    UART_TxBuf[tmphead] = data;
 234:	e9 2f       	mov	r30, r25
 236:	f0 e0       	ldi	r31, 0x00	; 0
 238:	e6 53       	subi	r30, 0x36	; 54
 23a:	ff 4f       	sbci	r31, 0xFF	; 255
 23c:	20 83       	st	Z, r18
    UART_TxHead = tmphead;
 23e:	90 93 0a 01 	sts	0x010A, r25

    /* enable UDRE interrupt */
    UART0_CONTROL    |= _BV(UART0_UDRIE);
 242:	55 9a       	sbi	0x0a, 5	; 10

}/* UART_PUTCHAR */
 244:	08 95       	ret

00000246 <UART_PRINT>:
Purpose:  transmit string to UART
Input:    string to be transmitted
Returns:  none          
**************************************************************************/
void UART_PRINT(const char *s )
{
 246:	cf 93       	push	r28
 248:	df 93       	push	r29
 24a:	ec 01       	movw	r28, r24
 24c:	03 c0       	rjmp	.+6      	; 0x254 <UART_PRINT+0xe>
    while (*s) 
      UART_PUTCHAR(*s++);
 24e:	21 96       	adiw	r28, 0x01	; 1
 250:	0e 94 11 01 	call	0x222	; 0x222 <UART_PUTCHAR>
Input:    string to be transmitted
Returns:  none          
**************************************************************************/
void UART_PRINT(const char *s )
{
    while (*s) 
 254:	88 81       	ld	r24, Y
 256:	88 23       	and	r24, r24
 258:	d1 f7       	brne	.-12     	; 0x24e <UART_PRINT+0x8>
      UART_PUTCHAR(*s++);

}/* UART_PRINT */
 25a:	df 91       	pop	r29
 25c:	cf 91       	pop	r28
 25e:	08 95       	ret

00000260 <__udivmodsi4>:
 260:	a1 e2       	ldi	r26, 0x21	; 33
 262:	1a 2e       	mov	r1, r26
 264:	aa 1b       	sub	r26, r26
 266:	bb 1b       	sub	r27, r27
 268:	fd 01       	movw	r30, r26
 26a:	0d c0       	rjmp	.+26     	; 0x286 <__udivmodsi4_ep>

0000026c <__udivmodsi4_loop>:
 26c:	aa 1f       	adc	r26, r26
 26e:	bb 1f       	adc	r27, r27
 270:	ee 1f       	adc	r30, r30
 272:	ff 1f       	adc	r31, r31
 274:	a2 17       	cp	r26, r18
 276:	b3 07       	cpc	r27, r19
 278:	e4 07       	cpc	r30, r20
 27a:	f5 07       	cpc	r31, r21
 27c:	20 f0       	brcs	.+8      	; 0x286 <__udivmodsi4_ep>
 27e:	a2 1b       	sub	r26, r18
 280:	b3 0b       	sbc	r27, r19
 282:	e4 0b       	sbc	r30, r20
 284:	f5 0b       	sbc	r31, r21

00000286 <__udivmodsi4_ep>:
 286:	66 1f       	adc	r22, r22
 288:	77 1f       	adc	r23, r23
 28a:	88 1f       	adc	r24, r24
 28c:	99 1f       	adc	r25, r25
 28e:	1a 94       	dec	r1
 290:	69 f7       	brne	.-38     	; 0x26c <__udivmodsi4_loop>
 292:	60 95       	com	r22
 294:	70 95       	com	r23
 296:	80 95       	com	r24
 298:	90 95       	com	r25
 29a:	9b 01       	movw	r18, r22
 29c:	ac 01       	movw	r20, r24
 29e:	bd 01       	movw	r22, r26
 2a0:	cf 01       	movw	r24, r30
 2a2:	08 95       	ret

000002a4 <_exit>:
 2a4:	f8 94       	cli

000002a6 <__stop_program>:
 2a6:	ff cf       	rjmp	.-2      	; 0x2a6 <__stop_program>
