
robokits.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000057a  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .bss          00000045  00800060  00800060  000005ee  2**0
                  ALLOC
  2 .debug_aranges 00000040  00000000  00000000  000005ee  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_pubnames 0000008c  00000000  00000000  0000062e  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_info   00000329  00000000  00000000  000006ba  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_abbrev 00000183  00000000  00000000  000009e3  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_line   0000032e  00000000  00000000  00000b66  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_frame  00000090  00000000  00000000  00000e94  2**2
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_str    0000016b  00000000  00000000  00000f24  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    000001da  00000000  00000000  0000108f  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   8:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  10:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  14:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  18:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  1c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  20:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  24:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  28:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  2c:	0c 94 c8 00 	jmp	0x190	; 0x190 <__vector_11>
  30:	0c 94 f2 00 	jmp	0x1e4	; 0x1e4 <__vector_12>
  34:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  38:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  3c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  40:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  44:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  48:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  4c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  50:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_clear_bss>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	01 c0       	rjmp	.+2      	; 0x6a <.do_clear_bss_start>

00000068 <.do_clear_bss_loop>:
  68:	1d 92       	st	X+, r1

0000006a <.do_clear_bss_start>:
  6a:	a5 3a       	cpi	r26, 0xA5	; 165
  6c:	b1 07       	cpc	r27, r17
  6e:	e1 f7       	brne	.-8      	; 0x68 <.do_clear_bss_loop>
  70:	0e 94 3e 00 	call	0x7c	; 0x7c <main>
  74:	0c 94 bb 02 	jmp	0x576	; 0x576 <_exit>

00000078 <__bad_interrupt>:
  78:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000007c <main>:
#include "uart.h"

#define UART_BAUD_RATE 9600 

int main(void)
{
  7c:	df 92       	push	r13
  7e:	ef 92       	push	r14
  80:	ff 92       	push	r15
  82:	0f 93       	push	r16
  84:	1f 93       	push	r17
  86:	cf 93       	push	r28
  88:	df 93       	push	r29
	sbi(DDRC, 6);
  8a:	a6 9a       	sbi	0x14, 6	; 20
	sbi(DDRC, 7);
  8c:	a7 9a       	sbi	0x14, 7	; 20
	sbi(PORTD, 6);
  8e:	96 9a       	sbi	0x12, 6	; 18
	sei();
  90:	78 94       	sei

	UART_INIT(UART_BAUD_RATE);	
  92:	60 e8       	ldi	r22, 0x80	; 128
  94:	75 e2       	ldi	r23, 0x25	; 37
  96:	80 e0       	ldi	r24, 0x00	; 0
  98:	90 e0       	ldi	r25, 0x00	; 0
  9a:	0e 94 17 01 	call	0x22e	; 0x22e <UART_INIT>
	
	TCCR1A = _BV(WGM10) | _BV(COM1A1) | _BV(COM1B1);    	// enable 8 bit PWM, select inverted PWM
  9e:	81 ea       	ldi	r24, 0xA1	; 161
  a0:	8f bd       	out	0x2f, r24	; 47
	TCCR1B = _BV(CS11) | _BV(WGM12);
  a2:	8a e0       	ldi	r24, 0x0A	; 10
  a4:	8e bd       	out	0x2e, r24	; 46
	OCR1A = 0;
  a6:	1b bc       	out	0x2b, r1	; 43
  a8:	1a bc       	out	0x2a, r1	; 42
	OCR1B = 0;
  aa:	19 bc       	out	0x29, r1	; 41
  ac:	18 bc       	out	0x28, r1	; 40
	sbi(PORTC,2);
  ae:	aa 9a       	sbi	0x15, 2	; 21
	sbi(PORTC,3);
  b0:	ab 9a       	sbi	0x15, 3	; 21
	sbi(DDRD,4);
  b2:	8c 9a       	sbi	0x11, 4	; 17
	sbi(DDRD,5);
  b4:	8d 9a       	sbi	0x11, 5	; 17
	sbi(DDRC,2);
  b6:	a2 9a       	sbi	0x14, 2	; 20
	sbi(DDRC,3);
  b8:	a3 9a       	sbi	0x14, 3	; 20
  ba:	80 e0       	ldi	r24, 0x00	; 0
			r1 -= '0';	r2 -= '0';
			
			l = (int)l1*10 + (int)l2;
			r = (int)r1*10 + (int)r2;
			
			OCR1A = (int) (100-l)*1.28;
  bc:	3a e0       	ldi	r19, 0x0A	; 10
  be:	d3 2e       	mov	r13, r19
  c0:	c4 e6       	ldi	r28, 0x64	; 100
  c2:	d0 e0       	ldi	r29, 0x00	; 0
  c4:	02 c0       	rjmp	.+4      	; 0xca <main+0x4e>
	char b = 0, l1 = 0, l2 = 0, r1 = 0, r2 = 0;
	int l, r;
	for (;;) // Loop forever 
	{
		while(b  != 'w')
			b = UART_GETCHAR();
  c6:	0e 94 40 01 	call	0x280	; 0x280 <UART_GETCHAR>
	
	char b = 0, l1 = 0, l2 = 0, r1 = 0, r2 = 0;
	int l, r;
	for (;;) // Loop forever 
	{
		while(b  != 'w')
  ca:	87 37       	cpi	r24, 0x77	; 119
  cc:	e1 f7       	brne	.-8      	; 0xc6 <main+0x4a>
			b = UART_GETCHAR();
		 		 
		 if(b == 'w')
		 {
			UART_PUTCHAR(b);
  ce:	0e 94 5d 01 	call	0x2ba	; 0x2ba <UART_PUTCHAR>
  d2:	80 e0       	ldi	r24, 0x00	; 0
  d4:	02 c0       	rjmp	.+4      	; 0xda <main+0x5e>
			while((l1 < '0') || (l1 > '9'))
				l1 = UART_GETCHAR();
  d6:	0e 94 40 01 	call	0x280	; 0x280 <UART_GETCHAR>
			b = UART_GETCHAR();
		 		 
		 if(b == 'w')
		 {
			UART_PUTCHAR(b);
			while((l1 < '0') || (l1 > '9'))
  da:	20 ed       	ldi	r18, 0xD0	; 208
  dc:	e2 2e       	mov	r14, r18
  de:	e8 0e       	add	r14, r24
  e0:	99 e0       	ldi	r25, 0x09	; 9
  e2:	9e 15       	cp	r25, r14
  e4:	c0 f3       	brcs	.-16     	; 0xd6 <main+0x5a>
				l1 = UART_GETCHAR();
			UART_PUTCHAR(l1);
  e6:	0e 94 5d 01 	call	0x2ba	; 0x2ba <UART_PUTCHAR>
  ea:	80 e0       	ldi	r24, 0x00	; 0
  ec:	02 c0       	rjmp	.+4      	; 0xf2 <main+0x76>
			while((l2 < '0') || (l2 > '9'))
				l2 = UART_GETCHAR();
  ee:	0e 94 40 01 	call	0x280	; 0x280 <UART_GETCHAR>
		 {
			UART_PUTCHAR(b);
			while((l1 < '0') || (l1 > '9'))
				l1 = UART_GETCHAR();
			UART_PUTCHAR(l1);
			while((l2 < '0') || (l2 > '9'))
  f2:	08 2f       	mov	r16, r24
  f4:	00 53       	subi	r16, 0x30	; 48
  f6:	0a 30       	cpi	r16, 0x0A	; 10
  f8:	d0 f7       	brcc	.-12     	; 0xee <main+0x72>
				l2 = UART_GETCHAR();
			UART_PUTCHAR(l2);
  fa:	0e 94 5d 01 	call	0x2ba	; 0x2ba <UART_PUTCHAR>
  fe:	80 e0       	ldi	r24, 0x00	; 0
 100:	02 c0       	rjmp	.+4      	; 0x106 <main+0x8a>
			while((r1 < '0') || (r1 > '9'))
				r1 = UART_GETCHAR();
 102:	0e 94 40 01 	call	0x280	; 0x280 <UART_GETCHAR>
				l1 = UART_GETCHAR();
			UART_PUTCHAR(l1);
			while((l2 < '0') || (l2 > '9'))
				l2 = UART_GETCHAR();
			UART_PUTCHAR(l2);
			while((r1 < '0') || (r1 > '9'))
 106:	90 ed       	ldi	r25, 0xD0	; 208
 108:	f9 2e       	mov	r15, r25
 10a:	f8 0e       	add	r15, r24
 10c:	99 e0       	ldi	r25, 0x09	; 9
 10e:	9f 15       	cp	r25, r15
 110:	c0 f3       	brcs	.-16     	; 0x102 <main+0x86>
				r1 = UART_GETCHAR();
			UART_PUTCHAR(r1);
 112:	0e 94 5d 01 	call	0x2ba	; 0x2ba <UART_PUTCHAR>
 116:	80 e0       	ldi	r24, 0x00	; 0
 118:	02 c0       	rjmp	.+4      	; 0x11e <main+0xa2>
			while((r2 < '0') || (r2 > '9'))
				r2 = UART_GETCHAR();
 11a:	0e 94 40 01 	call	0x280	; 0x280 <UART_GETCHAR>
				l2 = UART_GETCHAR();
			UART_PUTCHAR(l2);
			while((r1 < '0') || (r1 > '9'))
				r1 = UART_GETCHAR();
			UART_PUTCHAR(r1);
			while((r2 < '0') || (r2 > '9'))
 11e:	18 2f       	mov	r17, r24
 120:	10 53       	subi	r17, 0x30	; 48
 122:	1a 30       	cpi	r17, 0x0A	; 10
 124:	d0 f7       	brcc	.-12     	; 0x11a <main+0x9e>
				r2 = UART_GETCHAR();
			UART_PUTCHAR(r2);
 126:	0e 94 5d 01 	call	0x2ba	; 0x2ba <UART_PUTCHAR>
			
			cbi(PORTC, 2);
 12a:	aa 98       	cbi	0x15, 2	; 21
			cbi(PORTC, 3);
 12c:	ab 98       	cbi	0x15, 3	; 21
			r1 -= '0';	r2 -= '0';
			
			l = (int)l1*10 + (int)l2;
			r = (int)r1*10 + (int)r2;
			
			OCR1A = (int) (100-l)*1.28;
 12e:	ed 9c       	mul	r14, r13
 130:	c0 01       	movw	r24, r0
 132:	11 24       	eor	r1, r1
 134:	be 01       	movw	r22, r28
 136:	68 1b       	sub	r22, r24
 138:	79 0b       	sbc	r23, r25
 13a:	60 1b       	sub	r22, r16
 13c:	71 09       	sbc	r23, r1
 13e:	88 27       	eor	r24, r24
 140:	77 fd       	sbrc	r23, 7
 142:	80 95       	com	r24
 144:	98 2f       	mov	r25, r24
 146:	0e 94 aa 01 	call	0x354	; 0x354 <__floatsisf>
 14a:	2a e0       	ldi	r18, 0x0A	; 10
 14c:	37 ed       	ldi	r19, 0xD7	; 215
 14e:	43 ea       	ldi	r20, 0xA3	; 163
 150:	5f e3       	ldi	r21, 0x3F	; 63
 152:	0e 94 0e 02 	call	0x41c	; 0x41c <__mulsf3>
 156:	0e 94 7c 01 	call	0x2f8	; 0x2f8 <__fixunssfsi>
 15a:	7b bd       	out	0x2b, r23	; 43
 15c:	6a bd       	out	0x2a, r22	; 42
			OCR1B = (int) (100-r)*1.28;
 15e:	fd 9c       	mul	r15, r13
 160:	c0 01       	movw	r24, r0
 162:	11 24       	eor	r1, r1
 164:	be 01       	movw	r22, r28
 166:	68 1b       	sub	r22, r24
 168:	79 0b       	sbc	r23, r25
 16a:	61 1b       	sub	r22, r17
 16c:	71 09       	sbc	r23, r1
 16e:	88 27       	eor	r24, r24
 170:	77 fd       	sbrc	r23, 7
 172:	80 95       	com	r24
 174:	98 2f       	mov	r25, r24
 176:	0e 94 aa 01 	call	0x354	; 0x354 <__floatsisf>
 17a:	2a e0       	ldi	r18, 0x0A	; 10
 17c:	37 ed       	ldi	r19, 0xD7	; 215
 17e:	43 ea       	ldi	r20, 0xA3	; 163
 180:	5f e3       	ldi	r21, 0x3F	; 63
 182:	0e 94 0e 02 	call	0x41c	; 0x41c <__mulsf3>
 186:	0e 94 7c 01 	call	0x2f8	; 0x2f8 <__fixunssfsi>
 18a:	79 bd       	out	0x29, r23	; 41
 18c:	68 bd       	out	0x28, r22	; 40
 18e:	9b cf       	rjmp	.-202    	; 0xc6 <main+0x4a>

00000190 <__vector_11>:
SIGNAL(UART0_RECEIVE_INTERRUPT)
/*************************************************************************
Function: UART Receive Complete interrupt
Purpose:  called when the UART has received a character
**************************************************************************/
{
 190:	1f 92       	push	r1
 192:	0f 92       	push	r0
 194:	0f b6       	in	r0, 0x3f	; 63
 196:	0f 92       	push	r0
 198:	11 24       	eor	r1, r1
 19a:	2f 93       	push	r18
 19c:	8f 93       	push	r24
 19e:	9f 93       	push	r25
 1a0:	ef 93       	push	r30
 1a2:	ff 93       	push	r31
    unsigned char usr;
    unsigned char lastRxError;
 
 
    /* read UART status register and UART data register */ 
    usr  = UART0_STATUS;
 1a4:	9b b1       	in	r25, 0x0b	; 11
    data = UART0_DATA;
 1a6:	2c b1       	in	r18, 0x0c	; 12
#elif defined ( ATMEGA_UART )
    lastRxError = (usr & (_BV(FE)|_BV(DOR)) );
#endif
        
    /* calculate buffer index */ 
    tmphead = ( UART_RxHead + 1) & UART_RX_BUFFER_MASK;
 1a8:	e0 91 a2 00 	lds	r30, 0x00A2
 1ac:	ef 5f       	subi	r30, 0xFF	; 255
 1ae:	ef 71       	andi	r30, 0x1F	; 31
    
    if ( tmphead == UART_RxTail ) {
 1b0:	80 91 a3 00 	lds	r24, 0x00A3
 1b4:	e8 17       	cp	r30, r24
 1b6:	11 f4       	brne	.+4      	; 0x1bc <__vector_11+0x2c>
 1b8:	82 e0       	ldi	r24, 0x02	; 2
 1ba:	08 c0       	rjmp	.+16     	; 0x1cc <__vector_11+0x3c>
    
    /* */
#if defined( AT90_UART )
    lastRxError = (usr & (_BV(FE)|_BV(DOR)) );
#elif defined( ATMEGA_USART )
    lastRxError = (usr & (_BV(FE)|_BV(DOR)) );
 1bc:	89 2f       	mov	r24, r25
 1be:	88 71       	andi	r24, 0x18	; 24
    if ( tmphead == UART_RxTail ) {
        /* error: receive buffer overflow */
        lastRxError = UART_BUFFER_OVERFLOW >> 8;
    }else{
        /* store new index */
        UART_RxHead = tmphead;
 1c0:	e0 93 a2 00 	sts	0x00A2, r30
        /* store received data in buffer */
        UART_RxBuf[tmphead] = data;
 1c4:	f0 e0       	ldi	r31, 0x00	; 0
 1c6:	e0 58       	subi	r30, 0x80	; 128
 1c8:	ff 4f       	sbci	r31, 0xFF	; 255
 1ca:	20 83       	st	Z, r18
    }
    UART_LastRxError = lastRxError;   
 1cc:	80 93 a4 00 	sts	0x00A4, r24
}
 1d0:	ff 91       	pop	r31
 1d2:	ef 91       	pop	r30
 1d4:	9f 91       	pop	r25
 1d6:	8f 91       	pop	r24
 1d8:	2f 91       	pop	r18
 1da:	0f 90       	pop	r0
 1dc:	0f be       	out	0x3f, r0	; 63
 1de:	0f 90       	pop	r0
 1e0:	1f 90       	pop	r1
 1e2:	18 95       	reti

000001e4 <__vector_12>:
SIGNAL(UART0_TRANSMIT_INTERRUPT)
/*************************************************************************
Function: UART Data Register Empty interrupt
Purpose:  called when the UART is ready to transmit the next byte
**************************************************************************/
{
 1e4:	1f 92       	push	r1
 1e6:	0f 92       	push	r0
 1e8:	0f b6       	in	r0, 0x3f	; 63
 1ea:	0f 92       	push	r0
 1ec:	11 24       	eor	r1, r1
 1ee:	8f 93       	push	r24
 1f0:	9f 93       	push	r25
 1f2:	ef 93       	push	r30
 1f4:	ff 93       	push	r31
    unsigned char tmptail;

    
    if ( UART_TxHead != UART_TxTail) {
 1f6:	90 91 a0 00 	lds	r25, 0x00A0
 1fa:	80 91 a1 00 	lds	r24, 0x00A1
 1fe:	98 17       	cp	r25, r24
 200:	61 f0       	breq	.+24     	; 0x21a <__vector_12+0x36>
        /* calculate and store new buffer index */
        tmptail = (UART_TxTail + 1) & UART_TX_BUFFER_MASK;
 202:	e0 91 a1 00 	lds	r30, 0x00A1
 206:	ef 5f       	subi	r30, 0xFF	; 255
 208:	ef 71       	andi	r30, 0x1F	; 31
        UART_TxTail = tmptail;
 20a:	e0 93 a1 00 	sts	0x00A1, r30
        /* get one byte from buffer and write it to UART */
        UART0_DATA = UART_TxBuf[tmptail];  /* start transmission */
 20e:	f0 e0       	ldi	r31, 0x00	; 0
 210:	e0 5a       	subi	r30, 0xA0	; 160
 212:	ff 4f       	sbci	r31, 0xFF	; 255
 214:	80 81       	ld	r24, Z
 216:	8c b9       	out	0x0c, r24	; 12
 218:	01 c0       	rjmp	.+2      	; 0x21c <__vector_12+0x38>
    }else{
        /* tx buffer empty, disable UDRE interrupt */
        UART0_CONTROL &= ~_BV(UART0_UDRIE);
 21a:	55 98       	cbi	0x0a, 5	; 10
    }
}
 21c:	ff 91       	pop	r31
 21e:	ef 91       	pop	r30
 220:	9f 91       	pop	r25
 222:	8f 91       	pop	r24
 224:	0f 90       	pop	r0
 226:	0f be       	out	0x3f, r0	; 63
 228:	0f 90       	pop	r0
 22a:	1f 90       	pop	r1
 22c:	18 95       	reti

0000022e <UART_INIT>:
Purpose:  initialize UART and set baudrate
Input:    baudrate using macro UART_BAUD_SELECT()
Returns:  none
**************************************************************************/
void UART_INIT(unsigned long baudrate)
{
 22e:	9b 01       	movw	r18, r22
 230:	ac 01       	movw	r20, r24
    UART_TxHead = 0;
 232:	10 92 a0 00 	sts	0x00A0, r1
    UART_TxTail = 0;
 236:	10 92 a1 00 	sts	0x00A1, r1
    UART_RxHead = 0;
 23a:	10 92 a2 00 	sts	0x00A2, r1
    UART_RxTail = 0;
 23e:	10 92 a3 00 	sts	0x00A3, r1
    /* enable UART receiver and transmmitter and receive complete interrupt */
    UART0_CONTROL = _BV(RXCIE)|_BV(RXEN)|_BV(TXEN);

#elif defined (ATMEGA_USART)
		
	UART0_STATUS = (1<<U2X);  //Enable 2x speed
 242:	82 e0       	ldi	r24, 0x02	; 2
 244:	8b b9       	out	0x0b, r24	; 11
	baudrate=((F_CPU/(8*baudrate))-1);
 246:	63 e0       	ldi	r22, 0x03	; 3
 248:	22 0f       	add	r18, r18
 24a:	33 1f       	adc	r19, r19
 24c:	44 1f       	adc	r20, r20
 24e:	55 1f       	adc	r21, r21
 250:	6a 95       	dec	r22
 252:	d1 f7       	brne	.-12     	; 0x248 <UART_INIT+0x1a>
 254:	60 e0       	ldi	r22, 0x00	; 0
 256:	74 e2       	ldi	r23, 0x24	; 36
 258:	84 ef       	ldi	r24, 0xF4	; 244
 25a:	90 e0       	ldi	r25, 0x00	; 0
 25c:	0e 94 99 02 	call	0x532	; 0x532 <__udivmodsi4>
 260:	c9 01       	movw	r24, r18
 262:	da 01       	movw	r26, r20
 264:	01 97       	sbiw	r24, 0x01	; 1
 266:	a1 09       	sbc	r26, r1
 268:	b1 09       	sbc	r27, r1

    UBRRH = (unsigned char)(baudrate>>8);
 26a:	29 2f       	mov	r18, r25
 26c:	3a 2f       	mov	r19, r26
 26e:	4b 2f       	mov	r20, r27
 270:	55 27       	eor	r21, r21
 272:	20 bd       	out	0x20, r18	; 32
    UBRRL = (unsigned char) baudrate;
 274:	89 b9       	out	0x09, r24	; 9
   
    /* Enable USART receiver and transmitter and receive complete interrupt */
    UART0_CONTROL = _BV(RXCIE)|(1<<RXEN)|(1<<TXEN);
 276:	88 e9       	ldi	r24, 0x98	; 152
 278:	8a b9       	out	0x0a, r24	; 10
    
    /* Set frame format: asynchronous, 8data, no parity, 1stop bit */
    #ifdef URSEL
    UCSRC = (1<<URSEL)|(3<<UCSZ0);
 27a:	86 e8       	ldi	r24, 0x86	; 134
 27c:	80 bd       	out	0x20, r24	; 32
    /* Enable UART receiver and transmitter and receive complete interrupt */
    UART0_CONTROL = _BV(RXCIE)|(1<<RXEN)|(1<<TXEN);

#endif

}/* UART_INIT */
 27e:	08 95       	ret

00000280 <UART_GETCHAR>:
{    
    unsigned char tmptail;
    unsigned char data;


    if ( UART_RxHead == UART_RxTail ) {
 280:	90 91 a2 00 	lds	r25, 0x00A2
 284:	80 91 a3 00 	lds	r24, 0x00A3
 288:	98 17       	cp	r25, r24
 28a:	19 f4       	brne	.+6      	; 0x292 <UART_GETCHAR+0x12>
 28c:	20 e0       	ldi	r18, 0x00	; 0
 28e:	31 e0       	ldi	r19, 0x01	; 1
 290:	12 c0       	rjmp	.+36     	; 0x2b6 <UART_GETCHAR+0x36>
        return UART_NO_DATA;   /* no data available */
    }
    
    /* calculate /store buffer index */
    tmptail = (UART_RxTail + 1) & UART_RX_BUFFER_MASK;
 292:	e0 91 a3 00 	lds	r30, 0x00A3
 296:	ef 5f       	subi	r30, 0xFF	; 255
 298:	ef 71       	andi	r30, 0x1F	; 31
    UART_RxTail = tmptail; 
 29a:	e0 93 a3 00 	sts	0x00A3, r30
    
    /* get data from receive buffer */
    data = UART_RxBuf[tmptail];
 29e:	f0 e0       	ldi	r31, 0x00	; 0
 2a0:	e0 58       	subi	r30, 0x80	; 128
 2a2:	ff 4f       	sbci	r31, 0xFF	; 255
 2a4:	30 81       	ld	r19, Z
    
    return (UART_LastRxError << 8) + data;
 2a6:	20 91 a4 00 	lds	r18, 0x00A4
 2aa:	92 2f       	mov	r25, r18
 2ac:	80 e0       	ldi	r24, 0x00	; 0
 2ae:	ac 01       	movw	r20, r24
 2b0:	43 0f       	add	r20, r19
 2b2:	51 1d       	adc	r21, r1
 2b4:	9a 01       	movw	r18, r20

}/* UART_GETCHAR */
 2b6:	c9 01       	movw	r24, r18
 2b8:	08 95       	ret

000002ba <UART_PUTCHAR>:
Purpose:  write byte to ringbuffer for transmitting via UART
Input:    byte to be transmitted
Returns:  none          
**************************************************************************/
void UART_PUTCHAR(unsigned char data)
{
 2ba:	28 2f       	mov	r18, r24
    unsigned char tmphead;

    
    tmphead  = (UART_TxHead + 1) & UART_TX_BUFFER_MASK;
 2bc:	90 91 a0 00 	lds	r25, 0x00A0
 2c0:	9f 5f       	subi	r25, 0xFF	; 255
 2c2:	9f 71       	andi	r25, 0x1F	; 31
    
    while ( tmphead == UART_TxTail ){
 2c4:	80 91 a1 00 	lds	r24, 0x00A1
 2c8:	98 17       	cp	r25, r24
 2ca:	e1 f3       	breq	.-8      	; 0x2c4 <UART_PUTCHAR+0xa>
        ;/* wait for free space in buffer */
    }
    
    UART_TxBuf[tmphead] = data;
 2cc:	e9 2f       	mov	r30, r25
 2ce:	f0 e0       	ldi	r31, 0x00	; 0
 2d0:	e0 5a       	subi	r30, 0xA0	; 160
 2d2:	ff 4f       	sbci	r31, 0xFF	; 255
 2d4:	20 83       	st	Z, r18
    UART_TxHead = tmphead;
 2d6:	90 93 a0 00 	sts	0x00A0, r25

    /* enable UDRE interrupt */
    UART0_CONTROL    |= _BV(UART0_UDRIE);
 2da:	55 9a       	sbi	0x0a, 5	; 10

}/* UART_PUTCHAR */
 2dc:	08 95       	ret

000002de <UART_PRINT>:
Purpose:  transmit string to UART
Input:    string to be transmitted
Returns:  none          
**************************************************************************/
void UART_PRINT(const char *s )
{
 2de:	cf 93       	push	r28
 2e0:	df 93       	push	r29
 2e2:	ec 01       	movw	r28, r24
 2e4:	03 c0       	rjmp	.+6      	; 0x2ec <UART_PRINT+0xe>
    while (*s) 
      UART_PUTCHAR(*s++);
 2e6:	21 96       	adiw	r28, 0x01	; 1
 2e8:	0e 94 5d 01 	call	0x2ba	; 0x2ba <UART_PUTCHAR>
Input:    string to be transmitted
Returns:  none          
**************************************************************************/
void UART_PRINT(const char *s )
{
    while (*s) 
 2ec:	88 81       	ld	r24, Y
 2ee:	88 23       	and	r24, r24
 2f0:	d1 f7       	brne	.-12     	; 0x2e6 <UART_PRINT+0x8>
      UART_PUTCHAR(*s++);

}/* UART_PRINT */
 2f2:	df 91       	pop	r29
 2f4:	cf 91       	pop	r28
 2f6:	08 95       	ret

000002f8 <__fixunssfsi>:
 2f8:	70 d0       	rcall	.+224    	; 0x3da <__fp_splitA>
 2fa:	88 f0       	brcs	.+34     	; 0x31e <__fixunssfsi+0x26>
 2fc:	9f 57       	subi	r25, 0x7F	; 127
 2fe:	90 f0       	brcs	.+36     	; 0x324 <__fixunssfsi+0x2c>
 300:	b9 2f       	mov	r27, r25
 302:	99 27       	eor	r25, r25
 304:	b7 51       	subi	r27, 0x17	; 23
 306:	a0 f0       	brcs	.+40     	; 0x330 <__fixunssfsi+0x38>
 308:	d1 f0       	breq	.+52     	; 0x33e <__fixunssfsi+0x46>
 30a:	66 0f       	add	r22, r22
 30c:	77 1f       	adc	r23, r23
 30e:	88 1f       	adc	r24, r24
 310:	99 1f       	adc	r25, r25
 312:	1a f0       	brmi	.+6      	; 0x31a <__fixunssfsi+0x22>
 314:	ba 95       	dec	r27
 316:	c9 f7       	brne	.-14     	; 0x30a <__fixunssfsi+0x12>
 318:	12 c0       	rjmp	.+36     	; 0x33e <__fixunssfsi+0x46>
 31a:	b1 30       	cpi	r27, 0x01	; 1
 31c:	81 f0       	breq	.+32     	; 0x33e <__fixunssfsi+0x46>
 31e:	77 d0       	rcall	.+238    	; 0x40e <__fp_zero>
 320:	b1 e0       	ldi	r27, 0x01	; 1
 322:	08 95       	ret
 324:	74 c0       	rjmp	.+232    	; 0x40e <__fp_zero>
 326:	67 2f       	mov	r22, r23
 328:	78 2f       	mov	r23, r24
 32a:	88 27       	eor	r24, r24
 32c:	b8 5f       	subi	r27, 0xF8	; 248
 32e:	39 f0       	breq	.+14     	; 0x33e <__fixunssfsi+0x46>
 330:	b9 3f       	cpi	r27, 0xF9	; 249
 332:	cc f3       	brlt	.-14     	; 0x326 <__fixunssfsi+0x2e>
 334:	86 95       	lsr	r24
 336:	77 95       	ror	r23
 338:	67 95       	ror	r22
 33a:	b3 95       	inc	r27
 33c:	d9 f7       	brne	.-10     	; 0x334 <__fixunssfsi+0x3c>
 33e:	3e f4       	brtc	.+14     	; 0x34e <__fixunssfsi+0x56>
 340:	90 95       	com	r25
 342:	80 95       	com	r24
 344:	70 95       	com	r23
 346:	61 95       	neg	r22
 348:	7f 4f       	sbci	r23, 0xFF	; 255
 34a:	8f 4f       	sbci	r24, 0xFF	; 255
 34c:	9f 4f       	sbci	r25, 0xFF	; 255
 34e:	08 95       	ret

00000350 <__floatunsisf>:
 350:	e8 94       	clt
 352:	09 c0       	rjmp	.+18     	; 0x366 <__floatsisf+0x12>

00000354 <__floatsisf>:
 354:	97 fb       	bst	r25, 7
 356:	3e f4       	brtc	.+14     	; 0x366 <__floatsisf+0x12>
 358:	90 95       	com	r25
 35a:	80 95       	com	r24
 35c:	70 95       	com	r23
 35e:	61 95       	neg	r22
 360:	7f 4f       	sbci	r23, 0xFF	; 255
 362:	8f 4f       	sbci	r24, 0xFF	; 255
 364:	9f 4f       	sbci	r25, 0xFF	; 255
 366:	99 23       	and	r25, r25
 368:	a9 f0       	breq	.+42     	; 0x394 <__floatsisf+0x40>
 36a:	f9 2f       	mov	r31, r25
 36c:	96 e9       	ldi	r25, 0x96	; 150
 36e:	bb 27       	eor	r27, r27
 370:	93 95       	inc	r25
 372:	f6 95       	lsr	r31
 374:	87 95       	ror	r24
 376:	77 95       	ror	r23
 378:	67 95       	ror	r22
 37a:	b7 95       	ror	r27
 37c:	f1 11       	cpse	r31, r1
 37e:	f8 cf       	rjmp	.-16     	; 0x370 <__floatsisf+0x1c>
 380:	fa f4       	brpl	.+62     	; 0x3c0 <__floatsisf+0x6c>
 382:	bb 0f       	add	r27, r27
 384:	11 f4       	brne	.+4      	; 0x38a <__floatsisf+0x36>
 386:	60 ff       	sbrs	r22, 0
 388:	1b c0       	rjmp	.+54     	; 0x3c0 <__floatsisf+0x6c>
 38a:	6f 5f       	subi	r22, 0xFF	; 255
 38c:	7f 4f       	sbci	r23, 0xFF	; 255
 38e:	8f 4f       	sbci	r24, 0xFF	; 255
 390:	9f 4f       	sbci	r25, 0xFF	; 255
 392:	16 c0       	rjmp	.+44     	; 0x3c0 <__floatsisf+0x6c>
 394:	88 23       	and	r24, r24
 396:	11 f0       	breq	.+4      	; 0x39c <__floatsisf+0x48>
 398:	96 e9       	ldi	r25, 0x96	; 150
 39a:	11 c0       	rjmp	.+34     	; 0x3be <__floatsisf+0x6a>
 39c:	77 23       	and	r23, r23
 39e:	21 f0       	breq	.+8      	; 0x3a8 <__floatsisf+0x54>
 3a0:	9e e8       	ldi	r25, 0x8E	; 142
 3a2:	87 2f       	mov	r24, r23
 3a4:	76 2f       	mov	r23, r22
 3a6:	05 c0       	rjmp	.+10     	; 0x3b2 <__floatsisf+0x5e>
 3a8:	66 23       	and	r22, r22
 3aa:	71 f0       	breq	.+28     	; 0x3c8 <__floatsisf+0x74>
 3ac:	96 e8       	ldi	r25, 0x86	; 134
 3ae:	86 2f       	mov	r24, r22
 3b0:	70 e0       	ldi	r23, 0x00	; 0
 3b2:	60 e0       	ldi	r22, 0x00	; 0
 3b4:	2a f0       	brmi	.+10     	; 0x3c0 <__floatsisf+0x6c>
 3b6:	9a 95       	dec	r25
 3b8:	66 0f       	add	r22, r22
 3ba:	77 1f       	adc	r23, r23
 3bc:	88 1f       	adc	r24, r24
 3be:	da f7       	brpl	.-10     	; 0x3b6 <__floatsisf+0x62>
 3c0:	88 0f       	add	r24, r24
 3c2:	96 95       	lsr	r25
 3c4:	87 95       	ror	r24
 3c6:	97 f9       	bld	r25, 7
 3c8:	08 95       	ret

000003ca <__fp_split3>:
 3ca:	57 fd       	sbrc	r21, 7
 3cc:	90 58       	subi	r25, 0x80	; 128
 3ce:	44 0f       	add	r20, r20
 3d0:	55 1f       	adc	r21, r21
 3d2:	59 f0       	breq	.+22     	; 0x3ea <__fp_splitA+0x10>
 3d4:	5f 3f       	cpi	r21, 0xFF	; 255
 3d6:	71 f0       	breq	.+28     	; 0x3f4 <__fp_splitA+0x1a>
 3d8:	47 95       	ror	r20

000003da <__fp_splitA>:
 3da:	88 0f       	add	r24, r24
 3dc:	97 fb       	bst	r25, 7
 3de:	99 1f       	adc	r25, r25
 3e0:	61 f0       	breq	.+24     	; 0x3fa <__fp_splitA+0x20>
 3e2:	9f 3f       	cpi	r25, 0xFF	; 255
 3e4:	79 f0       	breq	.+30     	; 0x404 <__fp_splitA+0x2a>
 3e6:	87 95       	ror	r24
 3e8:	08 95       	ret
 3ea:	12 16       	cp	r1, r18
 3ec:	13 06       	cpc	r1, r19
 3ee:	14 06       	cpc	r1, r20
 3f0:	55 1f       	adc	r21, r21
 3f2:	f2 cf       	rjmp	.-28     	; 0x3d8 <__fp_split3+0xe>
 3f4:	46 95       	lsr	r20
 3f6:	f1 df       	rcall	.-30     	; 0x3da <__fp_splitA>
 3f8:	08 c0       	rjmp	.+16     	; 0x40a <__fp_splitA+0x30>
 3fa:	16 16       	cp	r1, r22
 3fc:	17 06       	cpc	r1, r23
 3fe:	18 06       	cpc	r1, r24
 400:	99 1f       	adc	r25, r25
 402:	f1 cf       	rjmp	.-30     	; 0x3e6 <__fp_splitA+0xc>
 404:	86 95       	lsr	r24
 406:	71 05       	cpc	r23, r1
 408:	61 05       	cpc	r22, r1
 40a:	08 94       	sec
 40c:	08 95       	ret

0000040e <__fp_zero>:
 40e:	e8 94       	clt

00000410 <__fp_szero>:
 410:	bb 27       	eor	r27, r27
 412:	66 27       	eor	r22, r22
 414:	77 27       	eor	r23, r23
 416:	cb 01       	movw	r24, r22
 418:	97 f9       	bld	r25, 7
 41a:	08 95       	ret

0000041c <__mulsf3>:
 41c:	0b d0       	rcall	.+22     	; 0x434 <__mulsf3x>
 41e:	78 c0       	rjmp	.+240    	; 0x510 <__fp_round>
 420:	69 d0       	rcall	.+210    	; 0x4f4 <__fp_pscA>
 422:	28 f0       	brcs	.+10     	; 0x42e <__mulsf3+0x12>
 424:	6e d0       	rcall	.+220    	; 0x502 <__fp_pscB>
 426:	18 f0       	brcs	.+6      	; 0x42e <__mulsf3+0x12>
 428:	95 23       	and	r25, r21
 42a:	09 f0       	breq	.+2      	; 0x42e <__mulsf3+0x12>
 42c:	5a c0       	rjmp	.+180    	; 0x4e2 <__fp_inf>
 42e:	5f c0       	rjmp	.+190    	; 0x4ee <__fp_nan>
 430:	11 24       	eor	r1, r1
 432:	ee cf       	rjmp	.-36     	; 0x410 <__fp_szero>

00000434 <__mulsf3x>:
 434:	ca df       	rcall	.-108    	; 0x3ca <__fp_split3>
 436:	a0 f3       	brcs	.-24     	; 0x420 <__mulsf3+0x4>

00000438 <__mulsf3_pse>:
 438:	95 9f       	mul	r25, r21
 43a:	d1 f3       	breq	.-12     	; 0x430 <__mulsf3+0x14>
 43c:	95 0f       	add	r25, r21
 43e:	50 e0       	ldi	r21, 0x00	; 0
 440:	55 1f       	adc	r21, r21
 442:	62 9f       	mul	r22, r18
 444:	f0 01       	movw	r30, r0
 446:	72 9f       	mul	r23, r18
 448:	bb 27       	eor	r27, r27
 44a:	f0 0d       	add	r31, r0
 44c:	b1 1d       	adc	r27, r1
 44e:	63 9f       	mul	r22, r19
 450:	aa 27       	eor	r26, r26
 452:	f0 0d       	add	r31, r0
 454:	b1 1d       	adc	r27, r1
 456:	aa 1f       	adc	r26, r26
 458:	64 9f       	mul	r22, r20
 45a:	66 27       	eor	r22, r22
 45c:	b0 0d       	add	r27, r0
 45e:	a1 1d       	adc	r26, r1
 460:	66 1f       	adc	r22, r22
 462:	82 9f       	mul	r24, r18
 464:	22 27       	eor	r18, r18
 466:	b0 0d       	add	r27, r0
 468:	a1 1d       	adc	r26, r1
 46a:	62 1f       	adc	r22, r18
 46c:	73 9f       	mul	r23, r19
 46e:	b0 0d       	add	r27, r0
 470:	a1 1d       	adc	r26, r1
 472:	62 1f       	adc	r22, r18
 474:	83 9f       	mul	r24, r19
 476:	a0 0d       	add	r26, r0
 478:	61 1d       	adc	r22, r1
 47a:	22 1f       	adc	r18, r18
 47c:	74 9f       	mul	r23, r20
 47e:	33 27       	eor	r19, r19
 480:	a0 0d       	add	r26, r0
 482:	61 1d       	adc	r22, r1
 484:	23 1f       	adc	r18, r19
 486:	84 9f       	mul	r24, r20
 488:	60 0d       	add	r22, r0
 48a:	21 1d       	adc	r18, r1
 48c:	82 2f       	mov	r24, r18
 48e:	76 2f       	mov	r23, r22
 490:	6a 2f       	mov	r22, r26
 492:	11 24       	eor	r1, r1
 494:	9f 57       	subi	r25, 0x7F	; 127
 496:	50 40       	sbci	r21, 0x00	; 0
 498:	8a f0       	brmi	.+34     	; 0x4bc <__stack+0x5d>
 49a:	e1 f0       	breq	.+56     	; 0x4d4 <__stack+0x75>
 49c:	88 23       	and	r24, r24
 49e:	4a f0       	brmi	.+18     	; 0x4b2 <__stack+0x53>
 4a0:	ee 0f       	add	r30, r30
 4a2:	ff 1f       	adc	r31, r31
 4a4:	bb 1f       	adc	r27, r27
 4a6:	66 1f       	adc	r22, r22
 4a8:	77 1f       	adc	r23, r23
 4aa:	88 1f       	adc	r24, r24
 4ac:	91 50       	subi	r25, 0x01	; 1
 4ae:	50 40       	sbci	r21, 0x00	; 0
 4b0:	a9 f7       	brne	.-22     	; 0x49c <__stack+0x3d>
 4b2:	9e 3f       	cpi	r25, 0xFE	; 254
 4b4:	51 05       	cpc	r21, r1
 4b6:	70 f0       	brcs	.+28     	; 0x4d4 <__stack+0x75>
 4b8:	14 c0       	rjmp	.+40     	; 0x4e2 <__fp_inf>
 4ba:	aa cf       	rjmp	.-172    	; 0x410 <__fp_szero>
 4bc:	5f 3f       	cpi	r21, 0xFF	; 255
 4be:	ec f3       	brlt	.-6      	; 0x4ba <__stack+0x5b>
 4c0:	98 3e       	cpi	r25, 0xE8	; 232
 4c2:	dc f3       	brlt	.-10     	; 0x4ba <__stack+0x5b>
 4c4:	86 95       	lsr	r24
 4c6:	77 95       	ror	r23
 4c8:	67 95       	ror	r22
 4ca:	b7 95       	ror	r27
 4cc:	f7 95       	ror	r31
 4ce:	e7 95       	ror	r30
 4d0:	9f 5f       	subi	r25, 0xFF	; 255
 4d2:	c1 f7       	brne	.-16     	; 0x4c4 <__stack+0x65>
 4d4:	fe 2b       	or	r31, r30
 4d6:	88 0f       	add	r24, r24
 4d8:	91 1d       	adc	r25, r1
 4da:	96 95       	lsr	r25
 4dc:	87 95       	ror	r24
 4de:	97 f9       	bld	r25, 7
 4e0:	08 95       	ret

000004e2 <__fp_inf>:
 4e2:	97 f9       	bld	r25, 7
 4e4:	9f 67       	ori	r25, 0x7F	; 127
 4e6:	80 e8       	ldi	r24, 0x80	; 128
 4e8:	70 e0       	ldi	r23, 0x00	; 0
 4ea:	60 e0       	ldi	r22, 0x00	; 0
 4ec:	08 95       	ret

000004ee <__fp_nan>:
 4ee:	9f ef       	ldi	r25, 0xFF	; 255
 4f0:	80 ec       	ldi	r24, 0xC0	; 192
 4f2:	08 95       	ret

000004f4 <__fp_pscA>:
 4f4:	00 24       	eor	r0, r0
 4f6:	0a 94       	dec	r0
 4f8:	16 16       	cp	r1, r22
 4fa:	17 06       	cpc	r1, r23
 4fc:	18 06       	cpc	r1, r24
 4fe:	09 06       	cpc	r0, r25
 500:	08 95       	ret

00000502 <__fp_pscB>:
 502:	00 24       	eor	r0, r0
 504:	0a 94       	dec	r0
 506:	12 16       	cp	r1, r18
 508:	13 06       	cpc	r1, r19
 50a:	14 06       	cpc	r1, r20
 50c:	05 06       	cpc	r0, r21
 50e:	08 95       	ret

00000510 <__fp_round>:
 510:	09 2e       	mov	r0, r25
 512:	03 94       	inc	r0
 514:	00 0c       	add	r0, r0
 516:	11 f4       	brne	.+4      	; 0x51c <__fp_round+0xc>
 518:	88 23       	and	r24, r24
 51a:	52 f0       	brmi	.+20     	; 0x530 <__fp_round+0x20>
 51c:	bb 0f       	add	r27, r27
 51e:	40 f4       	brcc	.+16     	; 0x530 <__fp_round+0x20>
 520:	bf 2b       	or	r27, r31
 522:	11 f4       	brne	.+4      	; 0x528 <__fp_round+0x18>
 524:	60 ff       	sbrs	r22, 0
 526:	04 c0       	rjmp	.+8      	; 0x530 <__fp_round+0x20>
 528:	6f 5f       	subi	r22, 0xFF	; 255
 52a:	7f 4f       	sbci	r23, 0xFF	; 255
 52c:	8f 4f       	sbci	r24, 0xFF	; 255
 52e:	9f 4f       	sbci	r25, 0xFF	; 255
 530:	08 95       	ret

00000532 <__udivmodsi4>:
 532:	a1 e2       	ldi	r26, 0x21	; 33
 534:	1a 2e       	mov	r1, r26
 536:	aa 1b       	sub	r26, r26
 538:	bb 1b       	sub	r27, r27
 53a:	fd 01       	movw	r30, r26
 53c:	0d c0       	rjmp	.+26     	; 0x558 <__udivmodsi4_ep>

0000053e <__udivmodsi4_loop>:
 53e:	aa 1f       	adc	r26, r26
 540:	bb 1f       	adc	r27, r27
 542:	ee 1f       	adc	r30, r30
 544:	ff 1f       	adc	r31, r31
 546:	a2 17       	cp	r26, r18
 548:	b3 07       	cpc	r27, r19
 54a:	e4 07       	cpc	r30, r20
 54c:	f5 07       	cpc	r31, r21
 54e:	20 f0       	brcs	.+8      	; 0x558 <__udivmodsi4_ep>
 550:	a2 1b       	sub	r26, r18
 552:	b3 0b       	sbc	r27, r19
 554:	e4 0b       	sbc	r30, r20
 556:	f5 0b       	sbc	r31, r21

00000558 <__udivmodsi4_ep>:
 558:	66 1f       	adc	r22, r22
 55a:	77 1f       	adc	r23, r23
 55c:	88 1f       	adc	r24, r24
 55e:	99 1f       	adc	r25, r25
 560:	1a 94       	dec	r1
 562:	69 f7       	brne	.-38     	; 0x53e <__udivmodsi4_loop>
 564:	60 95       	com	r22
 566:	70 95       	com	r23
 568:	80 95       	com	r24
 56a:	90 95       	com	r25
 56c:	9b 01       	movw	r18, r22
 56e:	ac 01       	movw	r20, r24
 570:	bd 01       	movw	r22, r26
 572:	cf 01       	movw	r24, r30
 574:	08 95       	ret

00000576 <_exit>:
 576:	f8 94       	cli

00000578 <__stop_program>:
 578:	ff cf       	rjmp	.-2      	; 0x578 <__stop_program>
