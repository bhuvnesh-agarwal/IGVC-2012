
robokits.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000000ce  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .debug_aranges 00000020  00000000  00000000  00000122  2**0
                  CONTENTS, READONLY, DEBUGGING
  2 .debug_pubnames 00000084  00000000  00000000  00000142  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_info   000001f8  00000000  00000000  000001c6  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_abbrev 0000011f  00000000  00000000  000003be  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_line   000001c2  00000000  00000000  000004dd  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_frame  000000a0  00000000  00000000  000006a0  2**2
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_str    0000011f  00000000  00000000  00000740  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_ranges 00000048  00000000  00000000  0000085f  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 55 00 	call	0xaa	; 0xaa <main>
  64:	0c 94 65 00 	jmp	0xca	; 0xca <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <LED1ON>:
#include <avr/pgmspace.h>
#include <util/delay.h>				
#include <compat/deprecated.h>		
#include <avr/interrupt.h>

void LED1ON(void) {sbi(PORTC,7);}
  6c:	af 9a       	sbi	0x15, 7	; 21
  6e:	08 95       	ret

00000070 <LED1OFF>:
void LED1OFF(void){cbi(PORTC,7);}
  70:	af 98       	cbi	0x15, 7	; 21
  72:	08 95       	ret

00000074 <TOGGLELED1>:
void TOGGLELED1(void) {if(bit_is_set(PORTC,7))cbi(PORTC,7); else sbi(PORTC,7);}
  74:	af 9b       	sbis	0x15, 7	; 21
  76:	02 c0       	rjmp	.+4      	; 0x7c <TOGGLELED1+0x8>
  78:	af 98       	cbi	0x15, 7	; 21
  7a:	08 95       	ret
  7c:	af 9a       	sbi	0x15, 7	; 21
  7e:	08 95       	ret

00000080 <LED2ON>:

void LED2ON(void) {sbi(PORTC,6);}
  80:	ae 9a       	sbi	0x15, 6	; 21
  82:	08 95       	ret

00000084 <LED2OFF>:
void LED2OFF(void) {cbi(PORTC,6);}
  84:	ae 98       	cbi	0x15, 6	; 21
  86:	08 95       	ret

00000088 <TOGGLELED2>:
void TOGGLELED2(void) {if(bit_is_set(PORTC,6))cbi(PORTC,6); else sbi(PORTC,6);}
  88:	ae 9b       	sbis	0x15, 6	; 21
  8a:	02 c0       	rjmp	.+4      	; 0x90 <TOGGLELED2+0x8>
  8c:	ae 98       	cbi	0x15, 6	; 21
  8e:	08 95       	ret
  90:	ae 9a       	sbi	0x15, 6	; 21
  92:	08 95       	ret

00000094 <SWITCH1ON>:

char SWITCH1ON(void) {return(bit_is_clear(PIND,6));}
  94:	80 b3       	in	r24, 0x10	; 16
  96:	82 95       	swap	r24
  98:	86 95       	lsr	r24
  9a:	86 95       	lsr	r24
  9c:	83 70       	andi	r24, 0x03	; 3
  9e:	80 95       	com	r24
  a0:	81 70       	andi	r24, 0x01	; 1
  a2:	08 95       	ret

000000a4 <SWITCH1OFF>:
char SWITCH1OFF(void) {return(bit_is_set(PIND,6));}
  a4:	80 b3       	in	r24, 0x10	; 16
  a6:	80 74       	andi	r24, 0x40	; 64
  a8:	08 95       	ret

000000aa <main>:


int main(void)
{
	sbi(DDRC,6);
  aa:	a6 9a       	sbi	0x14, 6	; 20
	sbi(DDRC,7);
  ac:	a7 9a       	sbi	0x14, 7	; 20
	sbi(PORTD,6);
  ae:	96 9a       	sbi	0x12, 6	; 18
	sei();
  b0:	78 94       	sei
#include <avr/pgmspace.h>
#include <util/delay.h>				
#include <compat/deprecated.h>		
#include <avr/interrupt.h>

void LED1ON(void) {sbi(PORTC,7);}
  b2:	af 9a       	sbi	0x15, 7	; 21
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
  b4:	20 e2       	ldi	r18, 0x20	; 32
  b6:	3e e4       	ldi	r19, 0x4E	; 78

	LED1ON();	
	
	while(1)
	{
		if(SWITCH1ON())
  b8:	86 99       	sbic	0x10, 6	; 16
  ba:	02 c0       	rjmp	.+4      	; 0xc0 <main+0x16>

void LED1ON(void) {sbi(PORTC,7);}
void LED1OFF(void){cbi(PORTC,7);}
void TOGGLELED1(void) {if(bit_is_set(PORTC,7))cbi(PORTC,7); else sbi(PORTC,7);}

void LED2ON(void) {sbi(PORTC,6);}
  bc:	ae 9a       	sbi	0x15, 6	; 21
  be:	01 c0       	rjmp	.+2      	; 0xc2 <main+0x18>
void LED2OFF(void) {cbi(PORTC,6);}
  c0:	ae 98       	cbi	0x15, 6	; 21
  c2:	c9 01       	movw	r24, r18
  c4:	01 97       	sbiw	r24, 0x01	; 1
  c6:	f1 f7       	brne	.-4      	; 0xc4 <main+0x1a>
  c8:	f7 cf       	rjmp	.-18     	; 0xb8 <main+0xe>

000000ca <_exit>:
  ca:	f8 94       	cli

000000cc <__stop_program>:
  cc:	ff cf       	rjmp	.-2      	; 0xcc <__stop_program>
