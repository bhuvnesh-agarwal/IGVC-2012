
robokits.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000003a6  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000026  00800060  000003a6  0000041a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .debug_aranges 00000040  00000000  00000000  00000440  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_pubnames 00000118  00000000  00000000  00000480  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_info   0000064a  00000000  00000000  00000598  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_abbrev 0000036b  00000000  00000000  00000be2  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_line   000006ef  00000000  00000000  00000f4d  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_frame  00000170  00000000  00000000  0000163c  2**2
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_str    000001ea  00000000  00000000  000017ac  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    0000028a  00000000  00000000  00001996  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000048  00000000  00000000  00001c20  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e6 ea       	ldi	r30, 0xA6	; 166
  68:	f3 e0       	ldi	r31, 0x03	; 3
  6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
  70:	a6 38       	cpi	r26, 0x86	; 134
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>
  76:	0e 94 60 00 	call	0xc0	; 0xc0 <main>
  7a:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <_exit>

0000007e <__bad_interrupt>:
  7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <LED1ON>:
#include <compat/deprecated.h>		
#include <avr/interrupt.h>

#include "lcd.h"

void LED1ON(void) {sbi(PORTC,7);}
  82:	af 9a       	sbi	0x15, 7	; 21
  84:	08 95       	ret

00000086 <LED1OFF>:
void LED1OFF(void){cbi(PORTC,7);}
  86:	af 98       	cbi	0x15, 7	; 21
  88:	08 95       	ret

0000008a <TOGGLELED1>:
void TOGGLELED1(void) {if(bit_is_set(PORTC,7))cbi(PORTC,7); else sbi(PORTC,7);}
  8a:	af 9b       	sbis	0x15, 7	; 21
  8c:	02 c0       	rjmp	.+4      	; 0x92 <TOGGLELED1+0x8>
  8e:	af 98       	cbi	0x15, 7	; 21
  90:	08 95       	ret
  92:	af 9a       	sbi	0x15, 7	; 21
  94:	08 95       	ret

00000096 <LED2ON>:

void LED2ON(void) {sbi(PORTC,6);}
  96:	ae 9a       	sbi	0x15, 6	; 21
  98:	08 95       	ret

0000009a <LED2OFF>:
void LED2OFF(void) {cbi(PORTC,6);}
  9a:	ae 98       	cbi	0x15, 6	; 21
  9c:	08 95       	ret

0000009e <TOGGLELED2>:
void TOGGLELED2(void) {if(bit_is_set(PORTC,6))cbi(PORTC,6); else sbi(PORTC,6);}
  9e:	ae 9b       	sbis	0x15, 6	; 21
  a0:	02 c0       	rjmp	.+4      	; 0xa6 <TOGGLELED2+0x8>
  a2:	ae 98       	cbi	0x15, 6	; 21
  a4:	08 95       	ret
  a6:	ae 9a       	sbi	0x15, 6	; 21
  a8:	08 95       	ret

000000aa <SWITCH1ON>:

char SWITCH1ON(void) {return(bit_is_clear(PIND,6));}
  aa:	80 b3       	in	r24, 0x10	; 16
  ac:	82 95       	swap	r24
  ae:	86 95       	lsr	r24
  b0:	86 95       	lsr	r24
  b2:	83 70       	andi	r24, 0x03	; 3
  b4:	80 95       	com	r24
  b6:	81 70       	andi	r24, 0x01	; 1
  b8:	08 95       	ret

000000ba <SWITCH1OFF>:
char SWITCH1OFF(void) {return(bit_is_set(PIND,6));}
  ba:	80 b3       	in	r24, 0x10	; 16
  bc:	80 74       	andi	r24, 0x40	; 64
  be:	08 95       	ret

000000c0 <main>:


int main(void)
{
  c0:	ef 92       	push	r14
  c2:	ff 92       	push	r15
  c4:	0f 93       	push	r16
  c6:	1f 93       	push	r17
  c8:	df 93       	push	r29
  ca:	cf 93       	push	r28
  cc:	cd b7       	in	r28, 0x3d	; 61
  ce:	de b7       	in	r29, 0x3e	; 62
  d0:	27 97       	sbiw	r28, 0x07	; 7
  d2:	0f b6       	in	r0, 0x3f	; 63
  d4:	f8 94       	cli
  d6:	de bf       	out	0x3e, r29	; 62
  d8:	0f be       	out	0x3f, r0	; 63
  da:	cd bf       	out	0x3d, r28	; 61
    char buffer[7];
    int  num=134;

	sbi(DDRC,6);
  dc:	a6 9a       	sbi	0x14, 6	; 20
	sbi(DDRC,7);
  de:	a7 9a       	sbi	0x14, 7	; 20
	sbi(PORTD,6);
  e0:	96 9a       	sbi	0x12, 6	; 18
	sei();
  e2:	78 94       	sei
#include <compat/deprecated.h>		
#include <avr/interrupt.h>

#include "lcd.h"

void LED1ON(void) {sbi(PORTC,7);}
  e4:	af 9a       	sbi	0x15, 7	; 21
	sbi(DDRC,7);
	sbi(PORTD,6);
	sei();

	LED1ON();
	LCD_INIT(LCD_DISP_ON);	
  e6:	8c e0       	ldi	r24, 0x0C	; 12
  e8:	0e 94 52 01 	call	0x2a4	; 0x2a4 <LCD_INIT>
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
  ec:	80 e9       	ldi	r24, 0x90	; 144
  ee:	e8 2e       	mov	r14, r24
  f0:	81 e0       	ldi	r24, 0x01	; 1
  f2:	f8 2e       	mov	r15, r24
		LCD_GOTOXY(0,1);        
        LCD_PRINT("WWW."); 
		_delay_ms(5000);              
		
        LCD_CLRSCR();
        itoa( num , buffer, 10);
  f4:	8e 01       	movw	r16, r28
  f6:	0f 5f       	subi	r16, 0xFF	; 255
  f8:	1f 4f       	sbci	r17, 0xFF	; 255
	LED1ON();
	LCD_INIT(LCD_DISP_ON);	
	
   for (;;) 
	{                           
        LCD_CLRSCR();       
  fa:	0e 94 29 01 	call	0x252	; 0x252 <LCD_CLRSCR>
        LCD_PRINT("ROBOKITS INDIA\n");	
  fe:	80 e6       	ldi	r24, 0x60	; 96
 100:	90 e0       	ldi	r25, 0x00	; 0
 102:	0e 94 46 01 	call	0x28c	; 0x28c <LCD_PRINT>
        LCD_PRINT("    ROBOKITS.ORG");	
 106:	80 e7       	ldi	r24, 0x70	; 112
 108:	90 e0       	ldi	r25, 0x00	; 0
 10a:	0e 94 46 01 	call	0x28c	; 0x28c <LCD_PRINT>
		LCD_GOTOXY(0,1);        
 10e:	80 e0       	ldi	r24, 0x00	; 0
 110:	61 e0       	ldi	r22, 0x01	; 1
 112:	0e 94 1d 01 	call	0x23a	; 0x23a <LCD_GOTOXY>
        LCD_PRINT("WWW."); 
 116:	81 e8       	ldi	r24, 0x81	; 129
 118:	90 e0       	ldi	r25, 0x00	; 0
 11a:	0e 94 46 01 	call	0x28c	; 0x28c <LCD_PRINT>
 11e:	80 e5       	ldi	r24, 0x50	; 80
 120:	93 ec       	ldi	r25, 0xC3	; 195
 122:	f7 01       	movw	r30, r14
 124:	31 97       	sbiw	r30, 0x01	; 1
 126:	f1 f7       	brne	.-4      	; 0x124 <main+0x64>
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 128:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 12a:	d9 f7       	brne	.-10     	; 0x122 <main+0x62>
		_delay_ms(5000);              
		
        LCD_CLRSCR();
 12c:	0e 94 29 01 	call	0x252	; 0x252 <LCD_CLRSCR>
        itoa( num , buffer, 10);
 130:	86 e8       	ldi	r24, 0x86	; 134
 132:	90 e0       	ldi	r25, 0x00	; 0
 134:	b8 01       	movw	r22, r16
 136:	4a e0       	ldi	r20, 0x0A	; 10
 138:	50 e0       	ldi	r21, 0x00	; 0
 13a:	0e 94 8c 01 	call	0x318	; 0x318 <itoa>
        LCD_PRINT(buffer);
 13e:	c8 01       	movw	r24, r16
 140:	0e 94 46 01 	call	0x28c	; 0x28c <LCD_PRINT>
 144:	80 e5       	ldi	r24, 0x50	; 80
 146:	93 ec       	ldi	r25, 0xC3	; 195
 148:	f7 01       	movw	r30, r14
 14a:	31 97       	sbiw	r30, 0x01	; 1
 14c:	f1 f7       	brne	.-4      	; 0x14a <main+0x8a>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 14e:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 150:	d9 f7       	brne	.-10     	; 0x148 <main+0x88>
 152:	d3 cf       	rjmp	.-90     	; 0xfa <main+0x3a>

00000154 <lcd_write>:
static void lcd_write(uint8_t data,uint8_t rs) 
{
    unsigned char dataBits ;


    if (rs) {   /* write data        (RS=1, RW=0) */
 154:	66 23       	and	r22, r22
 156:	11 f0       	breq	.+4      	; 0x15c <lcd_write+0x8>
       lcd_rs_high();
 158:	c0 9a       	sbi	0x18, 0	; 24
 15a:	01 c0       	rjmp	.+2      	; 0x15e <lcd_write+0xa>
    } else {    /* write instruction (RS=0, RW=0) */
       lcd_rs_low();
 15c:	c0 98       	cbi	0x18, 0	; 24
    }
    lcd_rw_low();
 15e:	c1 98       	cbi	0x18, 1	; 24
        LCD_DATA0_PORT = dataBits | 0x0F;
    }
    else
    {
        /* configure data pins as output */
        DDR(LCD_DATA0_PORT) |= _BV(LCD_DATA0_PIN);
 160:	bc 9a       	sbi	0x17, 4	; 23
        DDR(LCD_DATA1_PORT) |= _BV(LCD_DATA1_PIN);
 162:	bd 9a       	sbi	0x17, 5	; 23
        DDR(LCD_DATA2_PORT) |= _BV(LCD_DATA2_PIN);
 164:	be 9a       	sbi	0x17, 6	; 23
        DDR(LCD_DATA3_PORT) |= _BV(LCD_DATA3_PIN);
 166:	bf 9a       	sbi	0x17, 7	; 23
        
        /* output high nibble first */
        LCD_DATA3_PORT &= ~_BV(LCD_DATA3_PIN);
 168:	c7 98       	cbi	0x18, 7	; 24
        LCD_DATA2_PORT &= ~_BV(LCD_DATA2_PIN);
 16a:	c6 98       	cbi	0x18, 6	; 24
        LCD_DATA1_PORT &= ~_BV(LCD_DATA1_PIN);
 16c:	c5 98       	cbi	0x18, 5	; 24
        LCD_DATA0_PORT &= ~_BV(LCD_DATA0_PIN);
 16e:	c4 98       	cbi	0x18, 4	; 24
    	if(data & 0x80) LCD_DATA3_PORT |= _BV(LCD_DATA3_PIN);
 170:	87 fd       	sbrc	r24, 7
 172:	c7 9a       	sbi	0x18, 7	; 24
    	if(data & 0x40) LCD_DATA2_PORT |= _BV(LCD_DATA2_PIN);
 174:	86 fd       	sbrc	r24, 6
 176:	c6 9a       	sbi	0x18, 6	; 24
    	if(data & 0x20) LCD_DATA1_PORT |= _BV(LCD_DATA1_PIN);
 178:	85 fd       	sbrc	r24, 5
 17a:	c5 9a       	sbi	0x18, 5	; 24
    	if(data & 0x10) LCD_DATA0_PORT |= _BV(LCD_DATA0_PIN);   
 17c:	84 fd       	sbrc	r24, 4
 17e:	c4 9a       	sbi	0x18, 4	; 24

#if LCD_IO_MODE
/* toggle Enable Pin to initiate write */
static void toggle_e(void)
{
    lcd_e_high();
 180:	c2 9a       	sbi	0x18, 2	; 24
    lcd_e_delay();
 182:	00 c0       	rjmp	.+0      	; 0x184 <lcd_write+0x30>
    lcd_e_low();
 184:	c2 98       	cbi	0x18, 2	; 24
    	if(data & 0x20) LCD_DATA1_PORT |= _BV(LCD_DATA1_PIN);
    	if(data & 0x10) LCD_DATA0_PORT |= _BV(LCD_DATA0_PIN);   
        lcd_e_toggle();
        
        /* output low nibble */
        LCD_DATA3_PORT &= ~_BV(LCD_DATA3_PIN);
 186:	c7 98       	cbi	0x18, 7	; 24
        LCD_DATA2_PORT &= ~_BV(LCD_DATA2_PIN);
 188:	c6 98       	cbi	0x18, 6	; 24
        LCD_DATA1_PORT &= ~_BV(LCD_DATA1_PIN);
 18a:	c5 98       	cbi	0x18, 5	; 24
        LCD_DATA0_PORT &= ~_BV(LCD_DATA0_PIN);
 18c:	c4 98       	cbi	0x18, 4	; 24
    	if(data & 0x08) LCD_DATA3_PORT |= _BV(LCD_DATA3_PIN);
 18e:	83 fd       	sbrc	r24, 3
 190:	c7 9a       	sbi	0x18, 7	; 24
    	if(data & 0x04) LCD_DATA2_PORT |= _BV(LCD_DATA2_PIN);
 192:	82 fd       	sbrc	r24, 2
 194:	c6 9a       	sbi	0x18, 6	; 24
    	if(data & 0x02) LCD_DATA1_PORT |= _BV(LCD_DATA1_PIN);
 196:	81 fd       	sbrc	r24, 1
 198:	c5 9a       	sbi	0x18, 5	; 24
    	if(data & 0x01) LCD_DATA0_PORT |= _BV(LCD_DATA0_PIN);
 19a:	80 fd       	sbrc	r24, 0
 19c:	c4 9a       	sbi	0x18, 4	; 24

#if LCD_IO_MODE
/* toggle Enable Pin to initiate write */
static void toggle_e(void)
{
    lcd_e_high();
 19e:	c2 9a       	sbi	0x18, 2	; 24
    lcd_e_delay();
 1a0:	00 c0       	rjmp	.+0      	; 0x1a2 <lcd_write+0x4e>
    lcd_e_low();
 1a2:	c2 98       	cbi	0x18, 2	; 24
    	if(data & 0x02) LCD_DATA1_PORT |= _BV(LCD_DATA1_PIN);
    	if(data & 0x01) LCD_DATA0_PORT |= _BV(LCD_DATA0_PIN);
        lcd_e_toggle();        
        
        /* all data pins high (inactive) */
        LCD_DATA0_PORT |= _BV(LCD_DATA0_PIN);
 1a4:	c4 9a       	sbi	0x18, 4	; 24
        LCD_DATA1_PORT |= _BV(LCD_DATA1_PIN);
 1a6:	c5 9a       	sbi	0x18, 5	; 24
        LCD_DATA2_PORT |= _BV(LCD_DATA2_PIN);
 1a8:	c6 9a       	sbi	0x18, 6	; 24
        LCD_DATA3_PORT |= _BV(LCD_DATA3_PIN);
 1aa:	c7 9a       	sbi	0x18, 7	; 24
    }
}
 1ac:	08 95       	ret

000001ae <lcd_read>:
static uint8_t lcd_read(uint8_t rs) 
{
    uint8_t data;
    
    
    if (rs)
 1ae:	88 23       	and	r24, r24
 1b0:	11 f0       	breq	.+4      	; 0x1b6 <lcd_read+0x8>
        lcd_rs_high();                       /* RS=1: read data      */
 1b2:	c0 9a       	sbi	0x18, 0	; 24
 1b4:	01 c0       	rjmp	.+2      	; 0x1b8 <lcd_read+0xa>
    else
        lcd_rs_low();                        /* RS=0: read busy flag */
 1b6:	c0 98       	cbi	0x18, 0	; 24
    lcd_rw_high();                           /* RW=1  read mode      */
 1b8:	c1 9a       	sbi	0x18, 1	; 24
        lcd_e_low();
    }
    else
    {
        /* configure data pins as input */
        DDR(LCD_DATA0_PORT) &= ~_BV(LCD_DATA0_PIN);
 1ba:	bc 98       	cbi	0x17, 4	; 23
        DDR(LCD_DATA1_PORT) &= ~_BV(LCD_DATA1_PIN);
 1bc:	bd 98       	cbi	0x17, 5	; 23
        DDR(LCD_DATA2_PORT) &= ~_BV(LCD_DATA2_PIN);
 1be:	be 98       	cbi	0x17, 6	; 23
        DDR(LCD_DATA3_PORT) &= ~_BV(LCD_DATA3_PIN);
 1c0:	bf 98       	cbi	0x17, 7	; 23
                
        /* read high nibble first */
        lcd_e_high();
 1c2:	c2 9a       	sbi	0x18, 2	; 24
        lcd_e_delay();        
 1c4:	00 c0       	rjmp	.+0      	; 0x1c6 <lcd_read+0x18>
        data = 0;
        if ( PIN(LCD_DATA0_PORT) & _BV(LCD_DATA0_PIN) ) data |= 0x10;
 1c6:	b4 9b       	sbis	0x16, 4	; 22
 1c8:	02 c0       	rjmp	.+4      	; 0x1ce <lcd_read+0x20>
 1ca:	80 e1       	ldi	r24, 0x10	; 16
 1cc:	01 c0       	rjmp	.+2      	; 0x1d0 <lcd_read+0x22>
 1ce:	80 e0       	ldi	r24, 0x00	; 0
        if ( PIN(LCD_DATA1_PORT) & _BV(LCD_DATA1_PIN) ) data |= 0x20;
 1d0:	b5 99       	sbic	0x16, 5	; 22
 1d2:	80 62       	ori	r24, 0x20	; 32
        if ( PIN(LCD_DATA2_PORT) & _BV(LCD_DATA2_PIN) ) data |= 0x40;
 1d4:	b6 99       	sbic	0x16, 6	; 22
 1d6:	80 64       	ori	r24, 0x40	; 64
        if ( PIN(LCD_DATA3_PORT) & _BV(LCD_DATA3_PIN) ) data |= 0x80;
 1d8:	b7 99       	sbic	0x16, 7	; 22
 1da:	80 68       	ori	r24, 0x80	; 128
        lcd_e_low();
 1dc:	c2 98       	cbi	0x18, 2	; 24

        lcd_e_delay();                       /* Enable 500ns low       */
 1de:	00 c0       	rjmp	.+0      	; 0x1e0 <lcd_read+0x32>
    
        /* read low nibble */    
        lcd_e_high();
 1e0:	c2 9a       	sbi	0x18, 2	; 24
        lcd_e_delay();
 1e2:	00 c0       	rjmp	.+0      	; 0x1e4 <lcd_read+0x36>
        if ( PIN(LCD_DATA0_PORT) & _BV(LCD_DATA0_PIN) ) data |= 0x01;
 1e4:	b4 99       	sbic	0x16, 4	; 22
 1e6:	81 60       	ori	r24, 0x01	; 1
        if ( PIN(LCD_DATA1_PORT) & _BV(LCD_DATA1_PIN) ) data |= 0x02;
 1e8:	b5 99       	sbic	0x16, 5	; 22
 1ea:	82 60       	ori	r24, 0x02	; 2
        if ( PIN(LCD_DATA2_PORT) & _BV(LCD_DATA2_PIN) ) data |= 0x04;
 1ec:	b6 99       	sbic	0x16, 6	; 22
 1ee:	84 60       	ori	r24, 0x04	; 4
        if ( PIN(LCD_DATA3_PORT) & _BV(LCD_DATA3_PIN) ) data |= 0x08;        
 1f0:	b7 99       	sbic	0x16, 7	; 22
 1f2:	88 60       	ori	r24, 0x08	; 8
        lcd_e_low();
 1f4:	c2 98       	cbi	0x18, 2	; 24
    }
    return data;
}
 1f6:	08 95       	ret

000001f8 <lcd_waitbusy>:

{
    register uint8_t c;
    
    /* wait until busy flag is cleared */
    while ( (c=lcd_read(0)) & (1<<LCD_BUSY)) {}
 1f8:	80 e0       	ldi	r24, 0x00	; 0
 1fa:	0e 94 d7 00 	call	0x1ae	; 0x1ae <lcd_read>
 1fe:	87 fd       	sbrc	r24, 7
 200:	fb cf       	rjmp	.-10     	; 0x1f8 <lcd_waitbusy>
static inline void _delayFourCycles(unsigned int __count)
{
    if ( __count == 0 )    
        __asm__ __volatile__( "rjmp 1f\n 1:" );    // 2 cycles
    else
        __asm__ __volatile__ (
 202:	88 e0       	ldi	r24, 0x08	; 8
 204:	90 e0       	ldi	r25, 0x00	; 0
 206:	01 97       	sbiw	r24, 0x01	; 1
 208:	f1 f7       	brne	.-4      	; 0x206 <lcd_waitbusy+0xe>
    
    /* the address counter is updated 4us after the busy flag is cleared */
    delay(2);

    /* now read the address counter */
    return (lcd_read(0));  // return address counter
 20a:	80 e0       	ldi	r24, 0x00	; 0
 20c:	0e 94 d7 00 	call	0x1ae	; 0x1ae <lcd_read>
    
}/* lcd_waitbusy */
 210:	08 95       	ret

00000212 <lcd_command>:
Send LCD controller instruction command
Input:   instruction to send to LCD controller, see HD44780 data sheet
Returns: none
*************************************************************************/
void lcd_command(uint8_t cmd)
{
 212:	1f 93       	push	r17
 214:	18 2f       	mov	r17, r24
    lcd_waitbusy();
 216:	0e 94 fc 00 	call	0x1f8	; 0x1f8 <lcd_waitbusy>
    lcd_write(cmd,0);
 21a:	81 2f       	mov	r24, r17
 21c:	60 e0       	ldi	r22, 0x00	; 0
 21e:	0e 94 aa 00 	call	0x154	; 0x154 <lcd_write>
}
 222:	1f 91       	pop	r17
 224:	08 95       	ret

00000226 <lcd_data>:
Send data byte to LCD controller 
Input:   data to send to LCD controller, see HD44780 data sheet
Returns: none
*************************************************************************/
void lcd_data(uint8_t data)
{
 226:	1f 93       	push	r17
 228:	18 2f       	mov	r17, r24
    lcd_waitbusy();
 22a:	0e 94 fc 00 	call	0x1f8	; 0x1f8 <lcd_waitbusy>
    lcd_write(data,1);
 22e:	81 2f       	mov	r24, r17
 230:	61 e0       	ldi	r22, 0x01	; 1
 232:	0e 94 aa 00 	call	0x154	; 0x154 <lcd_write>
}
 236:	1f 91       	pop	r17
 238:	08 95       	ret

0000023a <LCD_GOTOXY>:
{
#if LCD_LINES==1
    lcd_command((1<<LCD_DDRAM)+LCD_START_LINE1+x);
#endif
#if LCD_LINES==2
    if ( y==0 ) 
 23a:	66 23       	and	r22, r22
 23c:	11 f4       	brne	.+4      	; 0x242 <LCD_GOTOXY+0x8>
        lcd_command((1<<LCD_DDRAM)+LCD_START_LINE1+x);
 23e:	80 58       	subi	r24, 0x80	; 128
 240:	01 c0       	rjmp	.+2      	; 0x244 <LCD_GOTOXY+0xa>
    else
        lcd_command((1<<LCD_DDRAM)+LCD_START_LINE2+x);
 242:	80 54       	subi	r24, 0x40	; 64
 244:	0e 94 09 01 	call	0x212	; 0x212 <lcd_command>
 248:	08 95       	ret

0000024a <lcd_getxy>:

/*************************************************************************
*************************************************************************/
int lcd_getxy(void)
{
    return lcd_waitbusy();
 24a:	0e 94 fc 00 	call	0x1f8	; 0x1f8 <lcd_waitbusy>
}
 24e:	90 e0       	ldi	r25, 0x00	; 0
 250:	08 95       	ret

00000252 <LCD_CLRSCR>:
/*************************************************************************
Clear display and set cursor to home position
*************************************************************************/
void LCD_CLRSCR(void)
{
    lcd_command(1<<LCD_CLR);
 252:	81 e0       	ldi	r24, 0x01	; 1
 254:	0e 94 09 01 	call	0x212	; 0x212 <lcd_command>
}
 258:	08 95       	ret

0000025a <LCD_HOME_POS>:
/*************************************************************************
Set cursor to home position
*************************************************************************/
void LCD_HOME_POS(void)
{
    lcd_command(1<<LCD_HOME);
 25a:	82 e0       	ldi	r24, 0x02	; 2
 25c:	0e 94 09 01 	call	0x212	; 0x212 <lcd_command>
}
 260:	08 95       	ret

00000262 <LCD_PUTC>:
Display character at current cursor position 
Input:    character to be displayed                                       
Returns:  none
*************************************************************************/
void LCD_PUTC(char c)
{
 262:	1f 93       	push	r17
 264:	18 2f       	mov	r17, r24
    uint8_t pos;


    pos = lcd_waitbusy();   // read busy-flag and address counter
 266:	0e 94 fc 00 	call	0x1f8	; 0x1f8 <lcd_waitbusy>
    if (c=='\n')
 26a:	1a 30       	cpi	r17, 0x0A	; 10
 26c:	49 f4       	brne	.+18     	; 0x280 <LCD_PUTC+0x1e>

#if LCD_LINES==1
    addressCounter = 0;
#endif
#if LCD_LINES==2
    if ( pos < (LCD_START_LINE2) )
 26e:	80 34       	cpi	r24, 0x40	; 64
 270:	10 f0       	brcs	.+4      	; 0x276 <LCD_PUTC+0x14>
 272:	80 e0       	ldi	r24, 0x00	; 0
 274:	01 c0       	rjmp	.+2      	; 0x278 <LCD_PUTC+0x16>
 276:	80 e4       	ldi	r24, 0x40	; 64
        addressCounter = LCD_START_LINE4;
    else 
        addressCounter = LCD_START_LINE1;
#endif
#endif
    lcd_command((1<<LCD_DDRAM)+addressCounter);
 278:	80 58       	subi	r24, 0x80	; 128
 27a:	0e 94 09 01 	call	0x212	; 0x212 <lcd_command>
 27e:	04 c0       	rjmp	.+8      	; 0x288 <LCD_PUTC+0x26>
            lcd_write((1<<LCD_DDRAM)+LCD_START_LINE1,0);
        }
#endif
        lcd_waitbusy();
#endif
        lcd_write(c, 1);
 280:	81 2f       	mov	r24, r17
 282:	61 e0       	ldi	r22, 0x01	; 1
 284:	0e 94 aa 00 	call	0x154	; 0x154 <lcd_write>
    }

}/* LCD_PUTC */
 288:	1f 91       	pop	r17
 28a:	08 95       	ret

0000028c <LCD_PRINT>:
Input:    string to be displayed
Returns:  none
*************************************************************************/
void LCD_PRINT(const char *s)
/* print string on lcd (no auto linefeed) */
{
 28c:	cf 93       	push	r28
 28e:	df 93       	push	r29
 290:	ec 01       	movw	r28, r24
 292:	02 c0       	rjmp	.+4      	; 0x298 <LCD_PRINT+0xc>
    register char c;

    while ( (c = *s++) ) {
        LCD_PUTC(c);
 294:	0e 94 31 01 	call	0x262	; 0x262 <LCD_PUTC>
void LCD_PRINT(const char *s)
/* print string on lcd (no auto linefeed) */
{
    register char c;

    while ( (c = *s++) ) {
 298:	89 91       	ld	r24, Y+
 29a:	88 23       	and	r24, r24
 29c:	d9 f7       	brne	.-10     	; 0x294 <LCD_PRINT+0x8>
        LCD_PUTC(c);
    }

}/* LCD_PRINT */
 29e:	df 91       	pop	r29
 2a0:	cf 91       	pop	r28
 2a2:	08 95       	ret

000002a4 <LCD_INIT>:
                   LCD_DISP_ON_CURSOR      display on, cursor on
                   LCD_DISP_CURSOR_BLINK   display on, cursor on flashing
Returns:  none
*************************************************************************/
void LCD_INIT(uint8_t dispAttr)
{
 2a4:	1f 93       	push	r17
 2a6:	18 2f       	mov	r17, r24
        DDR(LCD_E_PORT)     |= _BV(LCD_E_PIN);
    }
    else
    {
        /* configure all port bits as output (LCD data and control lines on different ports */
        DDR(LCD_RS_PORT)    |= _BV(LCD_RS_PIN);
 2a8:	b8 9a       	sbi	0x17, 0	; 23
        DDR(LCD_RW_PORT)    |= _BV(LCD_RW_PIN);
 2aa:	b9 9a       	sbi	0x17, 1	; 23
        DDR(LCD_E_PORT)     |= _BV(LCD_E_PIN);
 2ac:	ba 9a       	sbi	0x17, 2	; 23
        DDR(LCD_DATA0_PORT) |= _BV(LCD_DATA0_PIN);
 2ae:	bc 9a       	sbi	0x17, 4	; 23
        DDR(LCD_DATA1_PORT) |= _BV(LCD_DATA1_PIN);
 2b0:	bd 9a       	sbi	0x17, 5	; 23
        DDR(LCD_DATA2_PORT) |= _BV(LCD_DATA2_PIN);
 2b2:	be 9a       	sbi	0x17, 6	; 23
        DDR(LCD_DATA3_PORT) |= _BV(LCD_DATA3_PIN);
 2b4:	bf 9a       	sbi	0x17, 7	; 23
static inline void _delayFourCycles(unsigned int __count)
{
    if ( __count == 0 )    
        __asm__ __volatile__( "rjmp 1f\n 1:" );    // 2 cycles
    else
        __asm__ __volatile__ (
 2b6:	80 e0       	ldi	r24, 0x00	; 0
 2b8:	9a ef       	ldi	r25, 0xFA	; 250
 2ba:	01 97       	sbiw	r24, 0x01	; 1
 2bc:	f1 f7       	brne	.-4      	; 0x2ba <LCD_INIT+0x16>
        DDR(LCD_DATA3_PORT) |= _BV(LCD_DATA3_PIN);
    }
    delay(16000);        /* wait 16ms or more after power-on       */
    
    /* initial write to lcd is 8bit */
    LCD_DATA1_PORT |= _BV(LCD_DATA1_PIN);  // _BV(LCD_FUNCTION)>>4;
 2be:	c5 9a       	sbi	0x18, 5	; 24
    LCD_DATA0_PORT |= _BV(LCD_DATA0_PIN);  // _BV(LCD_FUNCTION_8BIT)>>4;
 2c0:	c4 9a       	sbi	0x18, 4	; 24

#if LCD_IO_MODE
/* toggle Enable Pin to initiate write */
static void toggle_e(void)
{
    lcd_e_high();
 2c2:	c2 9a       	sbi	0x18, 2	; 24
    lcd_e_delay();
 2c4:	00 c0       	rjmp	.+0      	; 0x2c6 <LCD_INIT+0x22>
    lcd_e_low();
 2c6:	c2 98       	cbi	0x18, 2	; 24
static inline void _delayFourCycles(unsigned int __count)
{
    if ( __count == 0 )    
        __asm__ __volatile__( "rjmp 1f\n 1:" );    // 2 cycles
    else
        __asm__ __volatile__ (
 2c8:	80 e0       	ldi	r24, 0x00	; 0
 2ca:	9e e4       	ldi	r25, 0x4E	; 78
 2cc:	01 97       	sbiw	r24, 0x01	; 1
 2ce:	f1 f7       	brne	.-4      	; 0x2cc <LCD_INIT+0x28>

#if LCD_IO_MODE
/* toggle Enable Pin to initiate write */
static void toggle_e(void)
{
    lcd_e_high();
 2d0:	c2 9a       	sbi	0x18, 2	; 24
    lcd_e_delay();
 2d2:	00 c0       	rjmp	.+0      	; 0x2d4 <LCD_INIT+0x30>
    lcd_e_low();
 2d4:	c2 98       	cbi	0x18, 2	; 24
static inline void _delayFourCycles(unsigned int __count)
{
    if ( __count == 0 )    
        __asm__ __volatile__( "rjmp 1f\n 1:" );    // 2 cycles
    else
        __asm__ __volatile__ (
 2d6:	80 e0       	ldi	r24, 0x00	; 0
 2d8:	91 e0       	ldi	r25, 0x01	; 1
 2da:	fc 01       	movw	r30, r24
 2dc:	31 97       	sbiw	r30, 0x01	; 1
 2de:	f1 f7       	brne	.-4      	; 0x2dc <LCD_INIT+0x38>

#if LCD_IO_MODE
/* toggle Enable Pin to initiate write */
static void toggle_e(void)
{
    lcd_e_high();
 2e0:	c2 9a       	sbi	0x18, 2	; 24
    lcd_e_delay();
 2e2:	00 c0       	rjmp	.+0      	; 0x2e4 <LCD_INIT+0x40>
    lcd_e_low();
 2e4:	c2 98       	cbi	0x18, 2	; 24
static inline void _delayFourCycles(unsigned int __count)
{
    if ( __count == 0 )    
        __asm__ __volatile__( "rjmp 1f\n 1:" );    // 2 cycles
    else
        __asm__ __volatile__ (
 2e6:	fc 01       	movw	r30, r24
 2e8:	31 97       	sbiw	r30, 0x01	; 1
 2ea:	f1 f7       	brne	.-4      	; 0x2e8 <LCD_INIT+0x44>
    /* repeat last command a third time */
    lcd_e_toggle();      
    delay(64);           /* delay, busy flag can't be checked here */

    /* now configure for 4bit mode */
    LCD_DATA0_PORT &= ~_BV(LCD_DATA0_PIN);   // LCD_FUNCTION_4BIT_1LINE>>4
 2ec:	c4 98       	cbi	0x18, 4	; 24

#if LCD_IO_MODE
/* toggle Enable Pin to initiate write */
static void toggle_e(void)
{
    lcd_e_high();
 2ee:	c2 9a       	sbi	0x18, 2	; 24
    lcd_e_delay();
 2f0:	00 c0       	rjmp	.+0      	; 0x2f2 <LCD_INIT+0x4e>
    lcd_e_low();
 2f2:	c2 98       	cbi	0x18, 2	; 24
static inline void _delayFourCycles(unsigned int __count)
{
    if ( __count == 0 )    
        __asm__ __volatile__( "rjmp 1f\n 1:" );    // 2 cycles
    else
        __asm__ __volatile__ (
 2f4:	01 97       	sbiw	r24, 0x01	; 1
 2f6:	f1 f7       	brne	.-4      	; 0x2f4 <LCD_INIT+0x50>
    /* Display with KS0073 controller requires special commands for enabling 4 line mode */
	lcd_command(KS0073_EXTENDED_FUNCTION_REGISTER_ON);
	lcd_command(KS0073_4LINES_MODE);
	lcd_command(KS0073_EXTENDED_FUNCTION_REGISTER_OFF);
#else
    lcd_command(LCD_FUNCTION_DEFAULT);      /* function set: display lines  */
 2f8:	88 e2       	ldi	r24, 0x28	; 40
 2fa:	0e 94 09 01 	call	0x212	; 0x212 <lcd_command>
#endif
    lcd_command(LCD_DISP_OFF);              /* display off                  */
 2fe:	88 e0       	ldi	r24, 0x08	; 8
 300:	0e 94 09 01 	call	0x212	; 0x212 <lcd_command>
    LCD_CLRSCR();                           /* display clear                */ 
 304:	0e 94 29 01 	call	0x252	; 0x252 <LCD_CLRSCR>
    lcd_command(LCD_MODE_DEFAULT);          /* set entry mode               */
 308:	86 e0       	ldi	r24, 0x06	; 6
 30a:	0e 94 09 01 	call	0x212	; 0x212 <lcd_command>
    lcd_command(dispAttr);                  /* display/cursor control       */
 30e:	81 2f       	mov	r24, r17
 310:	0e 94 09 01 	call	0x212	; 0x212 <lcd_command>

}/* LCD_INIT */
 314:	1f 91       	pop	r17
 316:	08 95       	ret

00000318 <itoa>:
 318:	fb 01       	movw	r30, r22
 31a:	9f 01       	movw	r18, r30
 31c:	e8 94       	clt
 31e:	42 30       	cpi	r20, 0x02	; 2
 320:	c4 f0       	brlt	.+48     	; 0x352 <itoa+0x3a>
 322:	45 32       	cpi	r20, 0x25	; 37
 324:	b4 f4       	brge	.+44     	; 0x352 <itoa+0x3a>
 326:	4a 30       	cpi	r20, 0x0A	; 10
 328:	29 f4       	brne	.+10     	; 0x334 <itoa+0x1c>
 32a:	97 fb       	bst	r25, 7
 32c:	1e f4       	brtc	.+6      	; 0x334 <itoa+0x1c>
 32e:	90 95       	com	r25
 330:	81 95       	neg	r24
 332:	9f 4f       	sbci	r25, 0xFF	; 255
 334:	64 2f       	mov	r22, r20
 336:	77 27       	eor	r23, r23
 338:	0e 94 bd 01 	call	0x37a	; 0x37a <__udivmodhi4>
 33c:	80 5d       	subi	r24, 0xD0	; 208
 33e:	8a 33       	cpi	r24, 0x3A	; 58
 340:	0c f0       	brlt	.+2      	; 0x344 <itoa+0x2c>
 342:	89 5d       	subi	r24, 0xD9	; 217
 344:	81 93       	st	Z+, r24
 346:	cb 01       	movw	r24, r22
 348:	00 97       	sbiw	r24, 0x00	; 0
 34a:	a1 f7       	brne	.-24     	; 0x334 <itoa+0x1c>
 34c:	16 f4       	brtc	.+4      	; 0x352 <itoa+0x3a>
 34e:	5d e2       	ldi	r21, 0x2D	; 45
 350:	51 93       	st	Z+, r21
 352:	10 82       	st	Z, r1
 354:	c9 01       	movw	r24, r18
 356:	0c 94 ad 01 	jmp	0x35a	; 0x35a <strrev>

0000035a <strrev>:
 35a:	dc 01       	movw	r26, r24
 35c:	fc 01       	movw	r30, r24
 35e:	67 2f       	mov	r22, r23
 360:	71 91       	ld	r23, Z+
 362:	77 23       	and	r23, r23
 364:	e1 f7       	brne	.-8      	; 0x35e <strrev+0x4>
 366:	32 97       	sbiw	r30, 0x02	; 2
 368:	04 c0       	rjmp	.+8      	; 0x372 <strrev+0x18>
 36a:	7c 91       	ld	r23, X
 36c:	6d 93       	st	X+, r22
 36e:	70 83       	st	Z, r23
 370:	62 91       	ld	r22, -Z
 372:	ae 17       	cp	r26, r30
 374:	bf 07       	cpc	r27, r31
 376:	c8 f3       	brcs	.-14     	; 0x36a <strrev+0x10>
 378:	08 95       	ret

0000037a <__udivmodhi4>:
 37a:	aa 1b       	sub	r26, r26
 37c:	bb 1b       	sub	r27, r27
 37e:	51 e1       	ldi	r21, 0x11	; 17
 380:	07 c0       	rjmp	.+14     	; 0x390 <__udivmodhi4_ep>

00000382 <__udivmodhi4_loop>:
 382:	aa 1f       	adc	r26, r26
 384:	bb 1f       	adc	r27, r27
 386:	a6 17       	cp	r26, r22
 388:	b7 07       	cpc	r27, r23
 38a:	10 f0       	brcs	.+4      	; 0x390 <__udivmodhi4_ep>
 38c:	a6 1b       	sub	r26, r22
 38e:	b7 0b       	sbc	r27, r23

00000390 <__udivmodhi4_ep>:
 390:	88 1f       	adc	r24, r24
 392:	99 1f       	adc	r25, r25
 394:	5a 95       	dec	r21
 396:	a9 f7       	brne	.-22     	; 0x382 <__udivmodhi4_loop>
 398:	80 95       	com	r24
 39a:	90 95       	com	r25
 39c:	bc 01       	movw	r22, r24
 39e:	cd 01       	movw	r24, r26
 3a0:	08 95       	ret

000003a2 <_exit>:
 3a2:	f8 94       	cli

000003a4 <__stop_program>:
 3a4:	ff cf       	rjmp	.-2      	; 0x3a4 <__stop_program>
